# # # strategies/enhanced_sr.py
# #
# # import pandas as pd
# # import numpy as np
# # from strategies.base_strategy import BaseStrategy
# #
# #
# # class EnhancedSRStrategy(BaseStrategy):
# #     def __init__(self, df=None):
# #         super().__init__()
# #         if df is not None:
# #             self.df = self.preprocess_data(df)
# #         else:
# #             self.df = None
# #
# #         super().__init__()
# #
# #     def generate_signal(self, data):
# #         """
# #         –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞: –ø—Ä–∏–Ω–∏–º–∞–µ—Ç df –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç 'BUY', 'SELL' –∏–ª–∏ None.
# #         """
# #         return self.analyze(data)
# #
# #     def analyze(self, df):
# #         """
# #         –ê–Ω–∞–ª–∏–∑ —É—Ä–æ–≤–Ω–µ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏/—Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö.
# #         """
# #         df = df.copy()
# #         if len(df) < 30:
# #             self.logger.warning("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.")
# #             return None
# #
# #         last_close = df['close'].iloc[-1]
# #         recent_lows = df['low'].rolling(20).min().iloc[-1]
# #         recent_highs = df['high'].rolling(20).max().iloc[-1]
# #
# #         support = recent_lows
# #         resistance = recent_highs
# #
# #         signal = None
# #         if last_close <= support * 1.01:
# #             signal = "BUY"
# #         elif last_close >= resistance * 0.99:
# #             signal = "SELL"
# #
# #         self.logger.info(f"[ANALYZE] Close: {last_close}, Support: {support}, Resistance: {resistance}, Signal: {signal}")
# #         return signal
# #
# #     def calculate_risk(self, df):
# #         """
# #         –í—ã—á–∏—Å–ª—è–µ—Ç —É—Ä–æ–≤–Ω–∏ SL/TP –∏ —Ä–∏—Å–∫ %.
# #         """
# #         df = df.copy()
# #         last_close = df['close'].iloc[-1]
# #         support = df['low'].rolling(20).min().iloc[-1]
# #         resistance = df['high'].rolling(20).max().iloc[-1]
# #
# #         signal = self.analyze(df)
# #         sl = None
# #         tp = None
# #
# #         if signal == "BUY":
# #             sl = support
# #             risk_pct = abs((last_close - sl) / last_close)
# #             tp = last_close + (last_close - sl) * 1.6
# #         elif signal == "SELL":
# #             sl = resistance
# #             risk_pct = abs((sl - last_close) / last_close)
# #             tp = last_close - (sl - last_close) * 1.6
# #         else:
# #             return {"stop_loss": None, "take_profit": None, "risk_pct": 0.0}
# #
# #         return {
# #             "stop_loss": round(sl, 2),
# #             "take_profit": round(tp, 2),
# #             "risk_pct": round(risk_pct, 4)
# #         }
# #
# #     def calculate_stop_loss_take_profit(self, df, direction, entry_price, window=20, sl_buffer=0.001, tp_multiplier=1.6):
# #         """
# #         –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç SL –∏ TP –ø–æ –±–ª–∏–∂–∞–π—à–∏–º —ç–∫—Å—Ç—Ä–µ–º—É–º–∞–º.
# #         """
# #         recent = df.iloc[-window:]
# #
# #         if direction == 'long':
# #             sl_level = recent['low'].min() - sl_buffer * entry_price
# #             sl_distance = entry_price - sl_level
# #             tp_level = entry_price + sl_distance * tp_multiplier
# #
# #         elif direction == 'short':
# #             sl_level = recent['high'].max() + sl_buffer * entry_price
# #             sl_distance = sl_level - entry_price
# #             tp_level = entry_price - sl_distance * tp_multiplier
# #
# #         else:
# #             raise ValueError("–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å 'long' –∏–ª–∏ 'short'.")
# #
# #         return round(sl_level, 2), round(tp_level, 2)
#
#
# # strategies/enhanced_sr.py
#
# import pandas as pd
# import numpy as np
# from strategies.base_strategy import BaseStrategy
#
# class EnhancedSRStrategy(BaseStrategy):
#     def __init__(self, df=None):
#         super().__init__()
#         self.df = self.preprocess_data(df) if df is not None else None
#         self.last_signal_time = None  # —Ñ–∏–ª—å—Ç—Ä –≤—Ö–æ–¥–∞ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
# #–¥–ª—è backtest
#     # def generate_signal(self, df):
#     #     return self.analyze(df)
#
#     def generate_signal(self, df):
#         direction = self.analyze(df)
#         if not direction:
#             return None
#
#         entry_price = df['close'].iloc[-1]
#         position = "long" if direction.lower() == "buy" else "short"
#         sl, tp = self.calculate_stop_loss_take_profit(df, position, entry_price)
#
#         return {
#             "signal": direction,
#             "entry": entry_price,
#             "sl": sl,
#             "tp": tp
#         }
#
#     def analyze(self, df):
#         df = df.copy()
#         if len(df) < 60:
#             self.logger.warning("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö (<60)")
#             return None
#
#         # –§–∏–ª—å—Ç—Ä —Ç—Ä–µ–Ω–¥–∞ (SMA-50)
#         sma_50 = df['close'].rolling(50).mean()
#         trend = sma_50.iloc[-1]
#         price = df['close'].iloc[-1]
#
#         # –§–∏–ª—å—Ç—Ä –æ–±—ä–µ–º–∞
#         avg_volume = df['volume'].rolling(20).mean().iloc[-1]
#         curr_volume = df['volume'].iloc[-1]
#         if curr_volume < avg_volume:
#             self.logger.info("üìâ –û–±—ä–µ–º –Ω–∏–∂–µ —Å—Ä–µ–¥–Ω–µ–≥–æ ‚Äî –Ω–µ—Ç —Å–∏–≥–Ω–∞–ª–∞")
#             return None
#
#         # –§–∏–ª—å—Ç—Ä –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏
#         vol = df['close'].rolling(20).std().iloc[-1]
#         if vol < 0.002 * price:
#             self.logger.info("üò¥ –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∏–∑–∫–∞—è ‚Äî –±–æ–∫–æ–≤–∏–∫")
#             return None
#
#         # –ü–æ–¥–¥–µ—Ä–∂–∫–∞ / —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ
#         recent_lows = df['low'].rolling(20).min().iloc[-1]
#         recent_highs = df['high'].rolling(20).max().iloc[-1]
#
#         support = recent_lows
#         resistance = recent_highs
#
#         signal = None
#
#         # BUY: —Ü–µ–Ω–∞ —É –ø–æ–¥–¥–µ—Ä–∂–∫–∏, –∏ –≤—ã—à–µ SMA (–ø–æ —Ç—Ä–µ–Ω–¥—É)
#         if price <= support * 1.01 and price > trend:
#             signal = "BUY"
#
#         # SELL: —Ü–µ–Ω–∞ —É —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è, –∏ –Ω–∏–∂–µ SMA
#         elif price >= resistance * 0.99 and price < trend:
#             signal = "SELL"
#
#         self.logger.info(f"[ANALYZE] close={price:.2f}, SMA50={trend:.2f}, vol={curr_volume:.0f}, "
#                          f"support={support:.2f}, resistance={resistance:.2f}, signal={signal}")
#         return signal
#
#     def calculate_risk(self, df):
#         price = df['close'].iloc[-1]
#         support = df['low'].rolling(20).min().iloc[-1]
#         resistance = df['high'].rolling(20).max().iloc[-1]
#         signal = self.analyze(df)
#
#         sl = None
#         tp = None
#
#         if signal == "BUY":
#             sl = support
#             risk_pct = abs((price - sl) / price)
#             tp = price + (price - sl) * 1.6
#         elif signal == "SELL":
#             sl = resistance
#             risk_pct = abs((sl - price) / price)
#             tp = price - (sl - price) * 1.6
#         else:
#             return {"stop_loss": None, "take_profit": None, "risk_pct": 0.0}
#
#         return {
#             "stop_loss": round(sl, 2),
#             "take_profit": round(tp, 2),
#             "risk_pct": round(risk_pct, 4)
#         }
#
#     def calculate_stop_loss_take_profit(self, df, direction, entry_price, window=20, sl_buffer=0.001, tp_multiplier=1.6):
#         """
#         SL/TP –ø–æ —ç–∫—Å—Ç—Ä–µ–º—É–º–∞–º.
#         """
#         recent = df.iloc[-window:]
#         if direction == "long":
#             sl = recent['low'].min() - sl_buffer * entry_price
#             tp = entry_price + (entry_price - sl) * tp_multiplier
#         elif direction == "short":
#             sl = recent['high'].max() + sl_buffer * entry_price
#             tp = entry_price - (sl - entry_price) * tp_multiplier
#         else:
#             raise ValueError("–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å 'long' –∏–ª–∏ 'short'.")
#
#         return round(sl, 2), round(tp, 2)
#



# strategies/enhanced_sr.py
# –î–æ–±–∞–≤–ª–µ–Ω cooldown (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 15 –º–∏–Ω—É—Ç) ‚Äî –∑–∞–ø—Ä–µ—Ç –Ω–∞ –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –≤—Ö–æ–¥ –ø–æ —Å–∏–º–≤–æ–ª—É.
#
# –î–æ–±–∞–≤–ª–µ–Ω—ã –ø—Ä–æ–≤–µ—Ä–∫–∏ SL < Entry –ø—Ä–∏ BUY, SL > Entry –ø—Ä–∏ SELL.
#
# –í—Å—Ç—Ä–æ–µ–Ω —Ñ–∏–ª—å—Ç—Ä –ø–æ RSI:
#
# –ø—Ä–∏ BUY, –µ—Å–ª–∏ RSI > 60 ‚Äî —Å–∏–≥–Ω–∞–ª –Ω–µ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è;
#
# –ø—Ä–∏ SELL, –µ—Å–ª–∏ RSI < 40 ‚Äî —Ç–æ–∂–µ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç—Å—è.
#
# –§–∏–ª—å—Ç—Ä –ø–æ –æ–±—ä–µ–º—É –∏ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏ –æ—Å—Ç–∞–ª—Å—è.
import pandas as pd
import numpy as np
from datetime import datetime, timedelta
from strategies.base_strategy import BaseStrategy

# strategies/enhanced_sr_fixed.py
import pandas as pd
import numpy as np
import logging


class EnhancedSRStrategy:
    """
    –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –≤–µ—Ä—Å–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ Enhanced SR

    –û—Å–Ω–æ–≤–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è:
    1. –£–ø—Ä–æ—â–µ–Ω—ã —É—Å–ª–æ–≤–∏—è: 3 –∏–∑ 5 –≤–º–µ—Å—Ç–æ 5 –∏–∑ 7
    2. –†–∞—Å—à–∏—Ä–µ–Ω—ã –¥–∏–∞–ø–∞–∑–æ–Ω—ã RSI
    3. –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞ NaN –≤ RSI
    4. –£–ª—É—á—à–µ–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    5. –î–æ–±–∞–≤–ª–µ–Ω—ã fallback –∑–Ω–∞—á–µ–Ω–∏—è
    """

    def __init__(self, data=None):
        self.logger = logging.getLogger('EnhancedSRStrategyFixed')
        self.data = data

    def generate_signal(self, data):
        """
        –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞
        """
        try:
            # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï 1: –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö
            if data is None:
                self.logger.warning("‚ùå –î–∞–Ω–Ω—ã–µ —Ä–∞–≤–Ω—ã None")
                return None

            if data.empty:  # –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—É—Å—Ç–æ–≥–æ DataFrame
                self.logger.warning("‚ùå DataFrame –ø—É—Å—Ç–æ–π")
                return None

            if len(data) < 20:  # –£–º–µ–Ω—å—à–µ–Ω–æ —Å 50 –¥–æ 20
                self.logger.warning(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö: {len(data)}")
                return None

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∫–æ–ª–æ–Ω–æ–∫
            required_cols = ['open', 'high', 'low', 'close', 'volume']
            missing_cols = [col for col in required_cols if col not in data.columns]
            if missing_cols:
                self.logger.error(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∫–æ–ª–æ–Ω–∫–∏: {missing_cols}")
                return None

            self.logger.debug(f"‚úÖ –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö: {len(data)} —Å–≤–µ—á–µ–π")

            # –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
            try:
                # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
                data = self._calculate_indicators(data.copy())

                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Ä–æ–≤–Ω–∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏/—Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è
                support_resistance = self._find_support_resistance_improved(data)

                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–∏–≥–Ω–∞–ª —Å –£–ü–†–û–©–ï–ù–ù–´–ú–ò —É—Å–ª–æ–≤–∏—è–º–∏
                signal = self._generate_trading_signal_improved(data, support_resistance)

                if signal:
                    self.logger.info(f"üìä –°–∏–≥–Ω–∞–ª —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω: {signal}")
                else:
                    self.logger.debug("üìä –°–∏–≥–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")

                return signal

            except Exception as e:
                self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –ª–æ–≥–∏–∫–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏: {e}")
                return None

        except Exception as e:
            self.logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ generate_signal: {e}")
            return None

    def _calculate_indicators(self, data):
        """–ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô —Ä–∞—Å—á–µ—Ç —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤"""
        try:
            # EMA —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –æ—à–∏–±–æ–∫
            try:
                data['ema_20'] = data['close'].ewm(span=20, adjust=False).mean()
                data['ema_50'] = data['close'].ewm(span=50, adjust=False).mean()
            except Exception as e:
                self.logger.warning(f"EMA calculation failed: {e}")
                # Fallback: –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç—É—é —Å–∫–æ–ª—å–∑—è—â—É—é —Å—Ä–µ–¥–Ω—é—é
                data['ema_20'] = data['close'].rolling(20, min_periods=1).mean()
                data['ema_50'] = data['close'].rolling(50, min_periods=1).mean()

            # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï 2: RSI —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –¥–µ–ª–µ–Ω–∏—è –Ω–∞ –Ω–æ–ª—å
            data['rsi'] = self._calculate_rsi_fixed(data['close'], 14)

            # Bollinger Bands —Å –∑–∞—â–∏—Ç–æ–π
            try:
                data['bb_middle'] = data['close'].rolling(20, min_periods=1).mean()
                bb_std = data['close'].rolling(20, min_periods=1).std()
                data['bb_upper'] = data['bb_middle'] + (bb_std * 2)
                data['bb_lower'] = data['bb_middle'] - (bb_std * 2)
            except Exception as e:
                self.logger.warning(f"Bollinger Bands failed: {e}")
                # Fallback: –ø—Ä–æ—Å—Ç—ã–µ —É—Ä–æ–≤–Ω–∏
                current_price = data['close'].iloc[-1]
                data['bb_middle'] = current_price
                data['bb_upper'] = current_price * 1.02
                data['bb_lower'] = current_price * 0.98

            # Volume analysis —Å –∑–∞—â–∏—Ç–æ–π
            try:
                data['volume_sma'] = data['volume'].rolling(20, min_periods=1).mean()
                data['volume_ratio'] = data['volume'] / (data['volume_sma'] + 1e-10)  # –ó–∞—â–∏—Ç–∞ –æ—Ç –¥–µ–ª–µ–Ω–∏—è –Ω–∞ –Ω–æ–ª—å
            except Exception as e:
                self.logger.warning(f"Volume analysis failed: {e}")
                data['volume_ratio'] = 1.0  # Fallback

            # –ó–∞–ø–æ–ª–Ω—è–µ–º NaN –∑–Ω–∞—á–µ–Ω–∏—è
            numeric_columns = ['ema_20', 'ema_50', 'rsi', 'bb_middle', 'bb_upper', 'bb_lower', 'volume_ratio']
            for col in numeric_columns:
                if col in data.columns:
                    data[col] = data[col].fillna(method='bfill').fillna(method='ffill')

            return data

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤: {e}")
            raise

    def _calculate_rsi_fixed(self, prices, period=14):
        """–ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô —Ä–∞—Å—á–µ—Ç RSI —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –≤—Å–µ—Ö –æ—à–∏–±–æ–∫"""
        try:
            if len(prices) < period:
                # –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π RSI
                return pd.Series([50.0] * len(prices), index=prices.index)

            delta = prices.diff()
            gain = delta.where(delta > 0, 0).rolling(window=period, min_periods=1).mean()
            loss = (-delta.where(delta < 0, 0)).rolling(window=period, min_periods=1).mean()

            # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ó–∞—â–∏—Ç–∞ –æ—Ç –¥–µ–ª–µ–Ω–∏—è –Ω–∞ –Ω–æ–ª—å
            rs = gain / (loss + 1e-10)  # –î–æ–±–∞–≤–ª—è–µ–º –º–∞–ª–µ–Ω—å–∫–æ–µ —á–∏—Å–ª–æ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –¥–µ–ª–µ–Ω–∏—è –Ω–∞ –Ω–æ–ª—å
            rsi = 100 - (100 / (1 + rs))

            # –ó–∞–ø–æ–ª–Ω—è–µ–º NaN –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω
            rsi = rsi.fillna(50.0)  # –ó–∞–ø–æ–ª–Ω—è–µ–º —Å—Ä–µ–¥–Ω–∏–º –∑–Ω–∞—á–µ–Ω–∏–µ–º
            rsi = rsi.clip(0, 100)  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω 0-100

            return rsi

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ RSI: {e}")
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π RSI –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
            return pd.Series([50.0] * len(prices), index=prices.index)

    def _find_support_resistance_improved(self, data):
        """–£–õ–£–ß–®–ï–ù–ù–´–ô –ø–æ–∏—Å–∫ —É—Ä–æ–≤–Ω–µ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∏ —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è"""
        try:
            current_price = data['close'].iloc[-1]

            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª–µ–µ –ø—Ä–æ—Å—Ç–æ–π –∏ –Ω–∞–¥–µ–∂–Ω—ã–π –ø–æ–¥—Ö–æ–¥
            recent_data = data.tail(min(50, len(data)))  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 50 –∏–ª–∏ –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–≤–µ—á–∏

            # –ü–æ–¥–¥–µ—Ä–∂–∫–∞ - –º–∏–Ω–∏–º—É–º –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 20 —Å–≤–µ—á–µ–π + –æ—Ç—Å—Ç—É–ø
            # –°–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ - –º–∞–∫—Å–∏–º—É–º –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 20 —Å–≤–µ—á–µ–π + –æ—Ç—Å—Ç—É–ø
            lookback = min(20, len(recent_data))

            support_base = recent_data['low'].tail(lookback).min()
            resistance_base = recent_data['high'].tail(lookback).max()

            # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç—Å—Ç—É–ø—ã –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
            support = support_base * 0.998  # 0.2% –Ω–∏–∂–µ –º–∏–Ω–∏–º—É–º–∞
            resistance = resistance_base * 1.002  # 0.2% –≤—ã—à–µ –º–∞–∫—Å–∏–º—É–º–∞

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑—É–º–Ω–æ—Å—Ç—å —É—Ä–æ–≤–Ω–µ–π
            if support >= current_price:
                support = current_price * 0.985  # 1.5% –Ω–∏–∂–µ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã

            if resistance <= current_price:
                resistance = current_price * 1.015  # 1.5% –≤—ã—à–µ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã

            return {
                'support': support,
                'resistance': resistance,
                'current_price': current_price
            }

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ S/R: {e}")
            # Fallback –∑–Ω–∞—á–µ–Ω–∏—è
            current_price = data['close'].iloc[-1]
            return {
                'support': current_price * 0.985,
                'resistance': current_price * 1.015,
                'current_price': current_price
            }

    def _generate_trading_signal_improved(self, data, sr_levels):
        """
        –ö–ê–†–î–ò–ù–ê–õ–¨–ù–û –£–ü–†–û–©–ï–ù–ù–ê–Ø –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞

        –û–°–ù–û–í–ù–´–ï –ò–ó–ú–ï–ù–ï–ù–ò–Ø:
        1. –¢–æ–ª—å–∫–æ 5 —É—Å–ª–æ–≤–∏–π –≤–º–µ—Å—Ç–æ 7
        2. –¢—Ä–µ–±—É–µ—Ç—Å—è 3 –∏–∑ 5 –≤–º–µ—Å—Ç–æ 5 –∏–∑ 7
        3. –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –¥–∏–∞–ø–∞–∑–æ–Ω—ã RSI
        4. –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞
        """
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –æ—à–∏–±–æ–∫
            last_row = data.iloc[-1]
            current_price = sr_levels['current_price']

            # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏–π —Å fallback
            rsi = last_row.get('rsi', 50.0)
            ema_20 = last_row.get('ema_20', current_price)
            ema_50 = last_row.get('ema_50', current_price)
            volume_ratio = last_row.get('volume_ratio', 1.0)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö
            if pd.isna(rsi) or rsi < 0 or rsi > 100:
                rsi = 50.0
            if pd.isna(ema_20):
                ema_20 = current_price
            if pd.isna(ema_50):
                ema_50 = current_price
            if pd.isna(volume_ratio) or volume_ratio <= 0:
                volume_ratio = 1.0

            self.logger.debug(
                f"–ê–Ω–∞–ª–∏–∑ —Å–∏–≥–Ω–∞–ª–∞: RSI={rsi:.1f}, EMA20={ema_20:.2f}, EMA50={ema_50:.2f}, Vol={volume_ratio:.2f}")

            # –£–ü–†–û–©–ï–ù–ù–´–ï —É—Å–ª–æ–≤–∏—è –¥–ª—è BUY (5 —É—Å–ª–æ–≤–∏–π, –Ω—É–∂–Ω–æ 3)
            buy_conditions = [
                rsi < 60,  # –†–ê–°–®–ò–†–ï–ù–û: –±—ã–ª–æ 25-45, —Å—Ç–∞–ª–æ <60
                current_price > ema_20,  # –¶–µ–Ω–∞ –≤—ã—à–µ EMA20
                ema_20 >= ema_50 * 0.999,  # EMA —Ç—Ä–µ–Ω–¥ –≤–≤–µ—Ä—Ö (—Å –¥–æ–ø—É—Å–∫–æ–º)
                current_price > sr_levels['support'] * 1.001,  # –í—ã—à–µ –ø–æ–¥–¥–µ—Ä–∂–∫–∏
                volume_ratio > 0.8  # –£–ü–†–û–©–ï–ù–û: –±—ã–ª 1.5, —Å—Ç–∞–ª 0.8
            ]

            # –£–ü–†–û–©–ï–ù–ù–´–ï —É—Å–ª–æ–≤–∏—è –¥–ª—è SELL (5 —É—Å–ª–æ–≤–∏–π, –Ω—É–∂–Ω–æ 3)
            sell_conditions = [
                rsi > 40,  # –†–ê–°–®–ò–†–ï–ù–û: –±—ã–ª–æ 55-75, —Å—Ç–∞–ª–æ >40
                current_price < ema_20,  # –¶–µ–Ω–∞ –Ω–∏–∂–µ EMA20
                ema_20 <= ema_50 * 1.001,  # EMA —Ç—Ä–µ–Ω–¥ –≤–Ω–∏–∑ (—Å –¥–æ–ø—É—Å–∫–æ–º)
                current_price < sr_levels['resistance'] * 0.999,  # –ù–∏–∂–µ —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è
                volume_ratio > 0.8  # –£–ü–†–û–©–ï–ù–û: –±—ã–ª 1.5, —Å—Ç–∞–ª 0.8
            ]

            # –ü–æ–¥—Å—á–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π
            buy_score = sum(buy_conditions)
            sell_score = sum(sell_conditions)

            self.logger.debug(f"–°—á–µ—Ç —É—Å–ª–æ–≤–∏–π: BUY={buy_score}/5, SELL={sell_score}/5")

            # –ì–õ–ê–í–ù–û–ï –ò–ó–ú–ï–ù–ï–ù–ò–ï: —Ç—Ä–µ–±—É–µ–º —Ç–æ–ª—å–∫–æ 3 –∏–∑ 5 —É—Å–ª–æ–≤–∏–π (–±—ã–ª–æ 5 –∏–∑ 7)
            if buy_score >= 3:
                signal = self._create_buy_signal_improved(current_price, sr_levels)
                if signal:
                    signal['conditions_met'] = f"{buy_score}/5"
                    self.logger.info(f"üü¢ BUY —Å–∏–≥–Ω–∞–ª: —É—Å–ª–æ–≤–∏–π –≤—ã–ø–æ–ª–Ω–µ–Ω–æ {buy_score}/5")
                return signal

            elif sell_score >= 3:
                signal = self._create_sell_signal_improved(current_price, sr_levels)
                if signal:
                    signal['conditions_met'] = f"{sell_score}/5"
                    self.logger.info(f"üî¥ SELL —Å–∏–≥–Ω–∞–ª: —É—Å–ª–æ–≤–∏–π –≤—ã–ø–æ–ª–Ω–µ–Ω–æ {sell_score}/5")
                return signal

            else:
                self.logger.debug(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —É—Å–ª–æ–≤–∏–π: BUY={buy_score}/5, SELL={sell_score}/5 (–Ω—É–∂–Ω–æ 3)")

            return None

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–∞: {e}")
            return None

    def _create_buy_signal_improved(self, current_price, sr_levels):
        """–£–õ–£–ß–®–ï–ù–ù–û–ï —Å–æ–∑–¥–∞–Ω–∏–µ BUY —Å–∏–≥–Ω–∞–ª–∞"""
        try:
            # –ë–æ–ª–µ–µ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–µ —É—Ä–æ–≤–Ω–∏ –¥–ª—è —É–≤–µ–ª–∏—á–µ–Ω–∏—è —á–∞—Å—Ç–æ—Ç—ã —Å–¥–µ–ª–æ–∫
            sl_distance = abs(current_price - sr_levels['support']) / current_price

            # SL –Ω–µ –±–ª–∏–∂–µ 0.5% –∏ –Ω–µ –¥–∞–ª—å—à–µ 3%
            # üî• –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è
            sl_distance = max(0.008, min(sl_distance, 0.04))  # –ú–∏–Ω–∏–º—É–º 0.8%, –º–∞–∫—Å–∏–º—É–º 4%
            sl_price = current_price * (1 - sl_distance)

            # TP –Ω–∞ –æ—Å–Ω–æ–≤–µ risk/reward ratio 1:2
            tp_distance = sl_distance * 2
            tp_price = current_price * (1 + tp_distance)

            return {
                'signal': 'BUY',
                'entry': current_price,
                'sl': sl_price,
                'tp': tp_price,
                'confidence': 0.7,  # –°–Ω–∏–∂–µ–Ω–∞ —Å 0.75
                'sl_distance_pct': sl_distance * 100,
                'tp_distance_pct': tp_distance * 100
            }
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è BUY —Å–∏–≥–Ω–∞–ª–∞: {e}")
            return None

    def _create_sell_signal_improved(self, current_price, sr_levels):
        """–£–õ–£–ß–®–ï–ù–ù–û–ï —Å–æ–∑–¥–∞–Ω–∏–µ SELL —Å–∏–≥–Ω–∞–ª–∞"""
        try:
            # –ë–æ–ª–µ–µ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–µ —É—Ä–æ–≤–Ω–∏ –¥–ª—è —É–≤–µ–ª–∏—á–µ–Ω–∏—è —á–∞—Å—Ç–æ—Ç—ã —Å–¥–µ–ª–æ–∫
            sl_distance = abs(sr_levels['resistance'] - current_price) / current_price

            # SL –Ω–µ –±–ª–∏–∂–µ 0.5% –∏ –Ω–µ –¥–∞–ª—å—à–µ 3%
            # üî• –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è
            sl_distance = max(0.008, min(sl_distance, 0.04))  # –ú–∏–Ω–∏–º—É–º 0.8%, –º–∞–∫—Å–∏–º—É–º 4%
            sl_price = current_price * (1 + sl_distance)

            # TP –Ω–∞ –æ—Å–Ω–æ–≤–µ risk/reward ratio 1:2
            tp_distance = sl_distance * 2
            tp_price = current_price * (1 - tp_distance)

            return {
                'signal': 'SELL',
                'entry': current_price,
                'sl': sl_price,
                'tp': tp_price,
                'confidence': 0.7,  # –°–Ω–∏–∂–µ–Ω–∞ —Å 0.75
                'sl_distance_pct': sl_distance * 100,
                'tp_distance_pct': tp_distance * 100
            }
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è SELL —Å–∏–≥–Ω–∞–ª–∞: {e}")
            return None

    def get_signal_statistics(self, data, lookback_periods=100):
        """–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —á–∞—Å—Ç–æ—Ç—ã —Å–∏–≥–Ω–∞–ª–æ–≤"""
        signals_count = 0
        buy_signals = 0
        sell_signals = 0

        start_idx = max(50, len(data) - lookback_periods)

        for i in range(start_idx, len(data)):
            test_data = data.iloc[:i + 1]
            signal = self.generate_signal(test_data)

            if signal:
                signals_count += 1
                if signal['signal'] == 'BUY':
                    buy_signals += 1
                else:
                    sell_signals += 1

        periods_tested = len(data) - start_idx
        signal_frequency = signals_count / periods_tested if periods_tested > 0 else 0

        return {
            'total_signals': signals_count,
            'buy_signals': buy_signals,
            'sell_signals': sell_signals,
            'periods_tested': periods_tested,
            'signal_frequency': signal_frequency,
            'signals_per_day': signal_frequency * (1440 / 5) if signal_frequency > 0 else 0  # Assuming 5-min timeframe
        }
