# #app.py
# import asyncio
# import logging
# import os
# from datetime import datetime
# from decimal import Decimal
# from telegram import Bot
# from connectors.bybit_connector import BybitConnector
# from strategies.enhanced_sr import EnhancedSRStrategy
# from config.settings import SYMBOLS, RISK_PERCENT, LEVERAGE
# from config.paths import LOG_DIR
# from config.settings import MIN_QTY
# from datetime import datetime
#
#
#
# class TradingBot:
#     def __init__(self):
#         self.logger = logging.getLogger('TradingBot')
#         self.connector = BybitConnector()
#         self.tg_bot = Bot(token=os.getenv("BOT_TOKEN"))
#         self.chat_id = os.getenv("CHAT_ID")
#         self.symbols = SYMBOLS
#         self.positions = {}
#         self.start_balance = None
#         self.setup_logging()
#
#     def setup_logging(self):
#         level = os.getenv("LOG_LEVEL", "INFO")
#         logging.basicConfig(
#             level=level,
#             format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
#             handlers=[
#                 logging.FileHandler(LOG_DIR / 'trading_bot.log'),
#                 logging.StreamHandler()
#             ]
#         )
#
#     async def send_telegram(self, message: str):
#         try:
#             await self.tg_bot.send_message(
#                 chat_id=self.chat_id,
#                 text=f"<b>{datetime.utcnow().strftime('%H:%M:%S')}</b>\n{message}",
#                 parse_mode='HTML'
#             )
#         except Exception as e:
#             self.logger.error(f"Telegram error: {str(e)}")
#
#     async def send_message(self, text: str):
#         await self.send_telegram(text)
#
#     async def get_account_balance(self):
#         balance = await self.connector.get_wallet_balance()
#         self.logger.info(f"Current balance: {balance}")
#
#         if not balance or balance <= 0:
#             await self.send_telegram("‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ: –Ω—É–ª–µ–≤–æ–π –±–∞–ª–∞–Ω—Å –Ω–∞ —Å—á–µ—Ç–µ!")
#
#         return balance
#
#     def calculate_position_size(self, price: float) -> float:
#         if not self.start_balance:
#             self.logger.warning("Start balance is None!")
#             return 0.0
#         risk_amount = self.start_balance * (RISK_PERCENT / 100)
#         return risk_amount / price
#
#     async def trading_cycle(self):
#         for symbol in self.symbols:
#             data = await self.connector.get_klines(symbol)
#             if data is None:
#                 continue
#
#             strategy = EnhancedSRStrategy(data)
#             trade = strategy.generate_signal(data)
#
#             if trade:
#                 await self.place_order(symbol, trade)
#
#
#     async def place_order(self, symbol: str, trade: dict):
#         try:
#             direction = trade["signal"]
#             sl = trade["sl"]
#             tp = trade["tp"]
#             entry_price = trade["entry"]
#
#             qty = max(self.calculate_position_size(entry_price), MIN_QTY.get(symbol, 0.001))
#             self.logger.info(f"üí∞ –†–∞—Å—á—ë—Ç –ø–æ–∑–∏—Ü–∏–∏: qty={qty}, entry={entry_price}, balance={self.start_balance}")
#
#             if qty <= 0:
#                 self.logger.warning(f"Zero quantity for {symbol}")
#                 return
#
#             order_params = {
#                 'category': 'linear',
#                 'symbol': symbol,
#                 'side': 'Buy' if direction == 'BUY' else 'Sell',
#                 'orderType': 'Market',
#                 'qty': round(qty, 3),
#                 'leverage': LEVERAGE
#             }
#
#             self.logger.info(f"üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ä–¥–µ—Ä–∞: {order_params}")
#             order = await self.connector.place_order(order_params)
#
#
#             if order is None or order.get("retCode") != 0:
#                 err_msg = order.get('retMsg') if order else "None response"
#                 self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–∞: {err_msg}")
#                 await self.send_telegram(f"‚ùå –û—Ä–¥–µ—Ä –Ω–µ —Ä–∞–∑–º–µ—â—ë–Ω: {err_msg}")
#                 return
#
#             order_id = order.get("result", {}).get("orderId")
#             time_now = datetime.utcnow().strftime("%H:%M:%S")
#
#             if order_id:
#                 await asyncio.sleep(1.5)
#                 status = self.connector.get_order_status(symbol, order_id)
#
#                 if status != "Filled":
#                     self.logger.warning(f"‚ö†Ô∏è –û—Ä–¥–µ—Ä {order_id} –Ω–µ –∏—Å–ø–æ–ª–Ω–µ–Ω! –°—Ç–∞—Ç—É—Å: {status}")
#                     await self.send_message(f"{time_now}\n‚ö†Ô∏è –û—Ä–¥–µ—Ä –Ω–µ –∏—Å–ø–æ–ª–Ω–µ–Ω: —Å—Ç–∞—Ç—É—Å {status}")
#                 else:
#                     self.logger.info(f"‚úÖ –û—Ä–¥–µ—Ä –∏—Å–ø–æ–ª–Ω–µ–Ω: {order_id}")
#                     await self.send_message(f"{time_now}\n‚úÖ –û—Ä–¥–µ—Ä –∏—Å–ø–æ–ª–Ω–µ–Ω: {order_id}")
#             else:
#                 self.logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å order_id –æ—Ç Bybit!")
#                 await self.send_message(f"{time_now}\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–º–µ—â–µ–Ω–∏–∏ –æ—Ä–¥–µ—Ä–∞")
#
#             await self.send_telegram(
#                 f"üì• <b>{symbol} {direction}</b>\n"
#                 f"Entry: {entry_price:.2f}\n"
#                 f"SL: {sl:.2f}\n"
#                 f"TP: {tp:.2f}"
#             )
#
#             self.positions[symbol] = {
#                 "entry_price": entry_price,
#                 "sl": sl,
#                 "tp": tp,
#                 "side": direction
#             }
#
#         except Exception as e:
#             self.logger.error(f"‚ùå Order failed: {str(e)}")
#             await self.send_telegram(f"‚ùå Order error: {str(e)}")
#
#     async def check_positions(self):
#         for symbol, pos in list(self.positions.items()):
#             try:
#                 price_data = await self.connector.get_last_price(symbol)
#                 current_price = float(price_data['last_price'])
#                 direction = pos["side"]
#
#                 # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ SL / TP
#                 sl_hit = direction == "BUY" and current_price <= pos["sl"] \
#                     or direction == "SELL" and current_price >= pos["sl"]
#
#                 tp_hit = direction == "BUY" and current_price >= pos["tp"] \
#                     or direction == "SELL" and current_price <= pos["tp"]
#
#                 if sl_hit:
#                     await self.send_telegram(
#                         f"‚ùå <b>{symbol}</b> SL hit at {current_price:.2f}"
#                     )
#                     del self.positions[symbol]
#                     continue
#
#                 if tp_hit:
#                     await self.send_telegram(
#                         f"‚úÖ <b>{symbol}</b> TP hit at {current_price:.2f}"
#                     )
#                     del self.positions[symbol]
#                     continue
#
#                 # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ PnL
#                 entry = pos['entry_price']
#                 pnl = (current_price - entry) / entry * 100
#                 if direction == 'SELL':
#                     pnl *= -1
#
#                 balance = await self.connector.get_wallet_balance()
#
#                 await self.send_telegram(
#                     f"üìä {symbol} PnL: {pnl:.2f}%\n"
#                     f"Entry: {entry:.2f}\n"
#                     f"Price: {current_price:.2f}"
#                     f"üí∞ Balance: {balance:.2f} USDT"
#                 )
#
#             except Exception as e:
#                 self.logger.error(f"Position check error: {str(e)}")
#
#     async def run(self):
#         await self.send_telegram("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
#         self.start_balance = await self.get_account_balance()
#
#         while True:
#             try:
#                 await self.trading_cycle()
#                 await self.check_positions()
#                 await asyncio.sleep(60)  # –∫–∞–∂–¥—ã–π —Ü–∏–∫–ª 1 –º–∏–Ω—É—Ç–∞
#             except Exception as e:
#                 self.logger.error(f"Main loop error: {str(e)}")
#                 await asyncio.sleep(30)
#
#
# if __name__ == "__main__":
#     bot = TradingBot()
#     try:
#         asyncio.run(bot.run())
#     except KeyboardInterrupt:
#         bot.logger.info("Bot stopped by user")
#     except Exception as e:
#         bot.logger.critical(f"Fatal error: {str(e)}")

# app.py
import asyncio
import logging
import os
from datetime import datetime, timedelta
from decimal import Decimal, ROUND_DOWN
from telegram import Bot
import time
from connectors.bybit_connector import BybitConnector
from strategies.enhanced_sr import EnhancedSRStrategy
from config.settings import SYMBOLS, RISK_PERCENT, LEVERAGE, MIN_QTY, LOG_DIR, QTY_PRECISION



class TradingBot:
    def __init__(self):
        self.logger = logging.getLogger('TradingBot')
        self.connector = BybitConnector()
        self.tg_bot = Bot(token=os.getenv("BOT_TOKEN"))
        self.chat_id = os.getenv("CHAT_ID")
        self.symbols = SYMBOLS
        self.positions = {}
        self.pending_orders = {}
        self.last_trade_time = {}
        self.failed_trades = {}
        self.api_errors = {}
        self.start_balance = None
        self.symbol_info = {}  # –ö—ç—à –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–∏–º–≤–æ–ª–∞—Ö
        self.setup_logging()

    def setup_logging(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å —Ä–æ—Ç–∞—Ü–∏–µ–π —Ñ–∞–π–ª–æ–≤"""
        from logging.handlers import RotatingFileHandler

        level = os.getenv("LOG_LEVEL", "INFO")

        # –°–æ–∑–¥–∞–µ–º —Ñ–æ—Ä–º–∞—Ç—Ç–µ—Ä
        formatter = logging.Formatter(
            '%(asctime)s - %(name)s - %(levelname)s - %(message)s'
        )

        # –§–∞–π–ª–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å —Ä–æ—Ç–∞—Ü–∏–µ–π
        file_handler = RotatingFileHandler(
            LOG_DIR / 'trading_bot.log',
            maxBytes=10 * 1024 * 1024,  # 10MB
            backupCount=5
        )
        file_handler.setFormatter(formatter)
        file_handler.setLevel(logging.DEBUG)

        # –ö–æ–Ω—Å–æ–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
        console_handler = logging.StreamHandler()
        console_handler.setFormatter(formatter)
        console_handler.setLevel(getattr(logging, level))

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
        self.logger.setLevel(logging.DEBUG)
        self.logger.addHandler(file_handler)
        self.logger.addHandler(console_handler)

    async def send_telegram(self, message: str):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
        try:
            await self.tg_bot.send_message(
                chat_id=self.chat_id,
                text=f"<b>{datetime.utcnow().strftime('%H:%M:%S')}</b>\n{message}",
                parse_mode='HTML'
            )
        except Exception as e:
            self.logger.error(f"Telegram error: {str(e)}")

    async def get_account_balance(self) -> float:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –∞–∫–∫–∞—É–Ω—Ç–∞"""
        balance = await self.connector.get_wallet_balance()
        self.logger.info(f"Current balance: {balance}")

        if not balance or balance <= 0:
            await self.send_telegram("‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ: –Ω—É–ª–µ–≤–æ–π –±–∞–ª–∞–Ω—Å –Ω–∞ —Å—á–µ—Ç–µ!")

        return balance

    async def get_symbol_info(self, symbol: str) -> dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–∏–º–≤–æ–ª–µ —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
        if symbol in self.symbol_info:
            return self.symbol_info[symbol]

        try:
            info = await self.connector.get_instruments_info(symbol)
            if info:
                self.symbol_info[symbol] = info
                self.logger.info(f"Loaded symbol info for {symbol}: {info}")
                return info
        except Exception as e:
            self.logger.error(f"Failed to get symbol info for {symbol}: {e}")

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        default_info = {
            'minOrderQty': MIN_QTY.get(symbol, 0.001),
            'qtyStep': 0.001,
            'minOrderAmt': 1.0,
            'tickSize': 0.01
        }
        self.symbol_info[symbol] = default_info
        return default_info

    async def calculate_position_size(self, price: float, symbol: str) -> tuple[float, bool]:
        """
        –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ —Å —É—á–µ—Ç–æ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç: (quantity, is_valid)
        """
        try:
            if not self.start_balance or self.start_balance <= 0:
                self.logger.warning("Start balance is None or zero!")
                return 0.0, False

            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∏–º–≤–æ–ª–µ
            symbol_info = await self.get_symbol_info(symbol)
            min_qty = symbol_info['minOrderQty']
            qty_step = symbol_info['qtyStep']
            min_notional = symbol_info.get('minOrderAmt', 1.0)

            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ (1.5% –æ—Ç –±–∞–ª–∞–Ω—Å–∞)
            risk_amount = self.start_balance * (RISK_PERCENT / 100)
            calculated_qty = risk_amount / price

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Å—É–º–º—É –æ—Ä–¥–µ—Ä–∞
            if calculated_qty * price < min_notional:
                calculated_qty = min_notional / price
                self.logger.info(f"Adjusted qty to meet min notional: {calculated_qty}")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
            if calculated_qty < min_qty:
                calculated_qty = min_qty
                self.logger.info(f"Adjusted qty to meet min quantity: {calculated_qty}")

            # –û–∫—Ä—É–≥–ª—è–µ–º –¥–æ –Ω—É–∂–Ω–æ–≥–æ —à–∞–≥–∞
            precision = QTY_PRECISION.get(symbol, 3)

            # –ò—Å–ø–æ–ª—å–∑—É–µ–º Decimal –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ –æ–∫—Ä—É–≥–ª–µ–Ω–∏—è
            decimal_qty = Decimal(str(calculated_qty))
            decimal_step = Decimal(str(qty_step))

            # –û–∫—Ä—É–≥–ª—è–µ–º –≤–Ω–∏–∑ –¥–æ –±–ª–∏–∂–∞–π—à–µ–≥–æ —à–∞–≥–∞
            steps = decimal_qty / decimal_step
            rounded_steps = steps.quantize(Decimal('1'), rounding=ROUND_DOWN)
            final_qty = float(rounded_steps * decimal_step)

            # –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
            if final_qty < min_qty:
                final_qty = min_qty

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏ –ø–æ–∑–∏—Ü–∏—è 5% –±–∞–ª–∞–Ω—Å–∞ (–∑–∞—â–∏—Ç–∞)
            position_value = final_qty * price
            if position_value > self.start_balance * 0.05:
                self.logger.warning(f"Position too large: {position_value:.2f} > {self.start_balance * 0.05:.2f}")
                return 0.0, False

            self.logger.info(f"Position calculation for {symbol}: "
                             f"price={price:.4f}, risk_amount={risk_amount:.2f}, "
                             f"calculated={calculated_qty:.6f}, final={final_qty:.6f}")

            return final_qty, True

        except Exception as e:
            self.logger.error(f"Position calculation error for {symbol}: {e}")
            return 0.0, False

    async def can_trade(self, symbol: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Ç–æ—Ä–≥–æ–≤–ª–∏ —Å–∏–º–≤–æ–ª–æ–º"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏
        if symbol in self.positions:
            return False

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–∂–∏–¥–∞—é—â–∏–µ –æ—Ä–¥–µ—Ä–∞
        if symbol in self.pending_orders:
            return False

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º cooldown —Å —É—á–µ—Ç–æ–º –Ω–µ—É–¥–∞—á–Ω—ã—Ö —Å–¥–µ–ª–æ–∫
        last_time = self.last_trade_time.get(symbol)
        if last_time:
            failed_count = self.failed_trades.get(symbol, 0)
            cooldown_minutes = 15 + (failed_count * 10)
            cooldown_minutes = min(cooldown_minutes, 120)  # –ú–∞–∫—Å–∏–º—É–º 2 —á–∞—Å–∞

            time_since = datetime.utcnow() - last_time
            if time_since < timedelta(minutes=cooldown_minutes):
                return False

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–∞—Å—Ç–æ—Ç—É –æ—à–∏–±–æ–∫ API
        api_error_count = self.api_errors.get(symbol, 0)
        if api_error_count >= 5:
            # –ë–ª–æ–∫–∏—Ä—É–µ–º —Å–∏–º–≤–æ–ª –Ω–∞ 1 —á–∞—Å –ø—Ä–∏ —á–∞—Å—Ç—ã—Ö –æ—à–∏–±–∫–∞—Ö API
            if last_time and (datetime.utcnow() - last_time) < timedelta(hours=1):
                return False

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å
        balance = await self.get_account_balance()
        if balance < 10:
            return False

        return True

    async def trading_cycle(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ç–æ—Ä–≥–æ–≤—ã–π —Ü–∏–∫–ª"""
        for symbol in self.symbols:
            try:
                if not await self.can_trade(symbol):
                    continue

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ API
                if not await self.connector.check_api_connection():
                    self.logger.warning(f"‚ö†Ô∏è API —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º {symbol}")
                    continue

                # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
                data = await self.connector.get_klines(symbol)

                # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ DataFrame
                if data is None:
                    self.logger.warning(f"‚ùå –î–∞–Ω–Ω—ã–µ –Ω–µ –ø–æ–ª—É—á–µ–Ω—ã –¥–ª—è {symbol}")
                    continue

                if data.empty:  # –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—É—Å—Ç–æ–≥–æ DataFrame
                    self.logger.warning(f"‚ùå –ü—É—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è {symbol}")
                    continue

                if len(data) < 50:
                    self.logger.warning(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol}: {len(data)}")
                    continue

                self.logger.debug(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(data)} —Å–≤–µ—á–µ–π –¥–ª—è {symbol}")

                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∏–≥–Ω–∞–ª
                strategy = EnhancedSRStrategy(data)
                trade = strategy.generate_signal(data)

                # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
                if trade is not None and isinstance(trade, dict) and trade.get('signal'):
                    self.logger.info(f"üìä –°–∏–≥–Ω–∞–ª –¥–ª—è {symbol}: {trade}")
                    await self.place_order(symbol, trade)
                else:
                    self.logger.debug(f"üìä –ù–µ—Ç —Å–∏–≥–Ω–∞–ª–∞ –¥–ª—è {symbol}")

            except Exception as e:
                self.logger.error(f"Trading cycle error for {symbol}: {e}")
                # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ API
                self.api_errors[symbol] = self.api_errors.get(symbol, 0) + 1
                await asyncio.sleep(5)

    async def get_safe_market_price(self, symbol: str, side: str, entry_price: float):
        """–ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Ü–µ–Ω—É –≤—Ö–æ–¥–∞ –∏–∑ —Å–∏–≥–Ω–∞–ª–∞ —Å –Ω–µ–±–æ–ª—å—à–∏–º –±—É—Ñ–µ—Ä–æ–º –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
        try:
            # –î–æ–±–∞–≤–ª—è–µ–º –±—É—Ñ–µ—Ä –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
            if side == "Buy":
                # –î–ª—è –ø–æ–∫—É–ø–∫–∏ –±–µ—Ä–µ–º —Ü–µ–Ω—É —á—É—Ç—å –≤—ã—à–µ —Ü–µ–Ω—ã –≤—Ö–æ–¥–∞
                safe_price = entry_price * 1.002  # +0.2%
            else:
                # –î–ª—è –ø—Ä–æ–¥–∞–∂–∏ –±–µ—Ä–µ–º —Ü–µ–Ω—É —á—É—Ç—å –Ω–∏–∂–µ —Ü–µ–Ω—ã –≤—Ö–æ–¥–∞
                safe_price = entry_price * 0.998  # -0.2%

            safe_price = round(safe_price, 2)  # –û–∫—Ä—É–≥–ª—è–µ–º –¥–æ 2 –∑–Ω–∞–∫–æ–≤ –¥–ª—è SOL
            self.logger.info(f"üí∞ –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è —Ü–µ–Ω–∞ –¥–ª—è {symbol} ({side}): {entry_price} ‚Üí {safe_price}")
            return safe_price

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ–π —Ü–µ–Ω—ã –¥–ª—è {symbol}: {e}")
            return None

    # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï 4: –£–ª—É—á—à–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è place_order_with_retry (–ò–î–ï–¢ –ü–ï–†–í–û–ô)
    async def place_order_with_retry(self, order_params: dict, symbol: str, max_retries: int = 3) -> dict:
        """–†–∞–∑–º–µ—â–µ–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞ —Å —ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–º –±—ç–∫–æ—Ñ—Ñ–æ–º"""
        for attempt in range(max_retries):
            try:
                order = await self.connector.place_order(order_params)

                if order is None:
                    self.api_errors[symbol] = self.api_errors.get(symbol, 0) + 1
                    error_count = self.api_errors[symbol]

                    self.logger.error(f"‚ùå –ü–æ–ª—É—á–µ–Ω None –æ—Ç–≤–µ—Ç –æ—Ç Bybit –¥–ª—è {symbol} (–æ—à–∏–±–∫–∞ #{error_count})")

                    if attempt < max_retries - 1:
                        # –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞: 1s, 2s, 4s
                        wait_time = (2 ** attempt)
                        await asyncio.sleep(wait_time)
                        continue
                    return None

                ret_code = order.get("retCode")
                ret_msg = order.get("retMsg", "Unknown error")

                if ret_code == 0:
                    return order

                # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫
                if ret_code == 110017:  # "current position is zero"
                    self.logger.warning(f"‚ö†Ô∏è –ü–æ–∑–∏—Ü–∏—è –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–Ω–∞ –¥–ª—è {symbol}, –ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}")
                    if attempt < max_retries - 1:
                        await asyncio.sleep(1.0)  # –ñ–¥–µ–º –¥–æ–ª—å—à–µ –¥–ª—è —ç—Ç–æ–π –æ—à–∏–±–∫–∏
                        continue

                elif ret_code == 10001:  # Minimum size error
                    current_qty = float(order_params['qty'])
                    symbol_info = await self.get_symbol_info(symbol)
                    min_qty = symbol_info['minOrderQty']

                    if current_qty < min_qty:
                        new_qty = min_qty * 1.1
                        order_params['qty'] = str(round(new_qty, QTY_PRECISION.get(symbol, 3)))
                        self.logger.warning(f"Adjusting qty from {current_qty} to {new_qty} for {symbol}")

                        if attempt < max_retries - 1:
                            await asyncio.sleep(1)
                            continue

                elif ret_code in [10002, 10003]:  # Balance errors
                    self.logger.error(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–π –±–∞–ª–∞–Ω—Å –¥–ª—è {symbol}")
                    await self.send_telegram(f"‚ùå {symbol} –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–π –±–∞–ª–∞–Ω—Å")
                    break

                else:
                    self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–∞: –∫–æ–¥ {ret_code}, —Å–æ–æ–±—â–µ–Ω–∏–µ: {ret_msg}")
                    if attempt < max_retries - 1:
                        await asyncio.sleep(2 ** attempt)
                        continue

                break

            except Exception as e:
                self.logger.error(f"Exception on attempt {attempt + 1} for {symbol}: {e}")
                if attempt < max_retries - 1:
                    await asyncio.sleep(2 ** attempt)

        return None

    # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï 2: –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è place_order
    async def place_order(self, symbol: str, trade: dict):
        """–†–∞–∑–º–µ—â–µ–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞ —Å –ü–†–û–°–¢–´–ú —Ä–µ—à–µ–Ω–∏–µ–º"""
        try:
            direction = trade["signal"]
            sl = trade["sl"]
            tp = trade["tp"]
            entry_price = trade["entry"]

            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏
            qty, is_valid = await self.calculate_position_size(entry_price, symbol)

            if not is_valid or qty <= 0:
                self.logger.warning(f"‚ùå –ù—É–ª–µ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è {symbol}: {qty}")
                return

            self.logger.info(f"üí∞ –†–∞—Å—á—ë—Ç –ø–æ–∑–∏—Ü–∏–∏: qty={qty}, entry={entry_price}, balance={self.start_balance}")

            # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –æ—Ä–¥–µ—Ä–∞
            if symbol == "SOLUSDT":
                safe_price = await self.get_safe_market_price(
                    symbol,
                    'Buy' if direction == 'BUY' else 'Sell',
                    entry_price
                )

                if not safe_price:
                    self.logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –±–µ–∑–æ–ø–∞—Å–Ω—É—é —Ü–µ–Ω—É –¥–ª—è {symbol}")
                    return

                order_params = {
                    'category': 'linear',
                    'symbol': symbol,
                    'side': 'Buy' if direction == 'BUY' else 'Sell',
                    'orderType': 'Limit',
                    'qty': str(qty),
                    'price': str(safe_price),
                    'timeInForce': 'IOC'
                }

                self.logger.info(f"üí∞ SOLUSDT –ª–∏–º–∏—Ç–Ω—ã–π –æ—Ä–¥–µ—Ä: entry={entry_price}, safe={safe_price}")
            else:
                order_params = {
                    'category': 'linear',
                    'symbol': symbol,
                    'side': 'Buy' if direction == 'BUY' else 'Sell',
                    'orderType': 'Market',
                    'qty': str(qty)
                }

            self.logger.info(f"üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ä–¥–µ—Ä–∞: {order_params}")

            # –†–∞–∑–º–µ—â–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –æ—Ä–¥–µ—Ä
            order = await self.place_order_with_retry(order_params, symbol)

            if not order:
                return

            # –ü–æ–ª—É—á–∞–µ–º order_id
            result = order.get("result", {})
            order_id = result.get("orderId")

            if not order_id:
                self.logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å order_id! –û—Ç–≤–µ—Ç: {order}")
                await self.send_telegram(f"‚ùå {symbol} - –ù–µ –ø–æ–ª—É—á–µ–Ω ID –æ—Ä–¥–µ—Ä–∞")
                return

            self.logger.info(f"‚úÖ Order {order_id} placed successfully with qty {qty}")

            # üî• –ü–†–û–°–¢–û–ï –†–ï–®–ï–ù–ò–ï: –ü—Ä–æ—Å—Ç–æ –∂–¥–µ–º 3-5 —Å–µ–∫—É–Ω–¥
            self.logger.info(f"‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–∞ {symbol}...")
            await asyncio.sleep(3.0)  # –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ 3 —Å–µ–∫—É–Ω–¥—ã

            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–∑–∏—Ü–∏–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            try:
                positions = await self.connector.get_positions(symbol)
                has_position = False
                if positions and len(positions) > 0:
                    has_position = any(float(pos.get('size', 0)) != 0 for pos in positions)

                if not has_position:
                    self.logger.warning(f"‚ö†Ô∏è –ü–æ–∑–∏—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è {symbol}, –Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º")
                    # –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å, –ø—Ä–æ—Å—Ç–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞–µ–º
            except Exception as e:
                self.logger.debug(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–∑–∏—Ü–∏–∏: {e}")

            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫–∏ –æ—à–∏–±–æ–∫ –ø—Ä–∏ —É—Å–ø–µ—Ö–µ
            if symbol in self.api_errors:
                del self.api_errors[symbol]

            # –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ–∂–∏–¥–∞—é—â–∏–µ –æ—Ä–¥–µ—Ä–∞
            self.pending_orders[symbol] = {
                "order_id": order_id,
                "trade": trade,
                "direction": direction,
                "qty": qty,
                "attempts": 0,
                "created_at": datetime.utcnow()
            }

            await self.send_telegram(
                f"üì§ <b>{symbol} {direction}</b> order placed\n"
                f"ID: {order_id}\n"
                f"Qty: {qty}\n"
                f"Entry: {entry_price:.4f}\n"
                f"SL: {sl:.4f} | TP: {tp:.4f}"
            )

            # –¢–µ–ø–µ—Ä—å —Ä–∞–∑–º–µ—â–∞–µ–º –∑–∞—â–∏—Ç–Ω—ã–µ –æ—Ä–¥–µ—Ä–∞
            protective_success = await self.place_protective_orders(
                symbol=symbol,
                side=order_params['side'],
                entry_price=entry_price,
                sl_price=sl,
                tp_price=tp,
                qty=qty
            )

            if protective_success:
                self.logger.info(f"üõ° –ó–∞—â–∏—Ç–Ω—ã–µ –æ—Ä–¥–µ—Ä–∞ —Ä–∞–∑–º–µ—â–µ–Ω—ã –¥–ª—è {symbol}")
                await self.send_telegram(f"üõ° <b>{symbol}</b> - Stop-Loss –∏ Take-Profit —Ä–∞–∑–º–µ—â–µ–Ω—ã")
            else:
                self.logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å –∑–∞—â–∏—Ç–Ω—ã–µ –æ—Ä–¥–µ—Ä–∞ –¥–ª—è {symbol}")
                await self.send_telegram(f"‚ö†Ô∏è <b>{symbol}</b> - –û—à–∏–±–∫–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –∑–∞—â–∏—Ç–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤")

        except Exception as e:
            self.logger.error(f"Order placement error for {symbol}: {e}")
            await self.send_telegram(f"‚ùå {symbol} order error: {str(e)}")

            # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –Ω–µ—É–¥–∞—á
            self.failed_trades[symbol] = self.failed_trades.get(symbol, 0) + 1
            self.last_trade_time[symbol] = datetime.utcnow()

    # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï 3: –£–ª—É—á—à–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –∑–∞—â–∏—Ç–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤
    async def place_protective_orders(self, symbol: str, side: str, entry_price: float, sl_price: float,
                                      tp_price: float, qty: float):
        """–†–∞–∑–º–µ—â–∞–µ—Ç –∑–∞—â–∏—Ç–Ω—ã–µ –æ—Ä–¥–µ—Ä–∞ —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏"""
        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω—É—é —Å—Ç–æ—Ä–æ–Ω—É –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏
            close_side = "Sell" if side == "Buy" else "Buy"

            # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏–∏ –ø–æ–∑–∏—Ü–∏–∏
            await asyncio.sleep(1.0)

            sl_success = False
            tp_success = False

            # 1. –†–∞–∑–º–µ—â–∞–µ–º —Å—Ç–æ–ø-–ª–æ—Å—Å
            try:
                sl_order = {
                    "category": "linear",
                    "symbol": symbol,
                    "side": close_side,
                    "orderType": "Limit",
                    "qty": str(qty),
                    "price": str(sl_price),
                    "reduceOnly": True,
                    "timeInForce": "GTC"
                }

                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª—å—à–µ –ø–æ–ø—ã—Ç–æ–∫ –¥–ª—è –∑–∞—â–∏—Ç–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤
                sl_response = await self.place_order_with_retry(sl_order, symbol, max_retries=5)
                if sl_response:
                    self.logger.info(f"‚úÖ Stop-Loss (Limit) —Ä–∞–∑–º–µ—â–µ–Ω –¥–ª—è {symbol}: {sl_price}")
                    sl_success = True
                else:
                    self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è Stop-Loss –¥–ª—è {symbol}")

            except Exception as e:
                self.logger.error(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Ä–∞–∑–º–µ—â–µ–Ω–∏–∏ Stop-Loss –¥–ª—è {symbol}: {e}")

            # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –æ—Ä–¥–µ—Ä–∞–º–∏
            await asyncio.sleep(0.5)

            # 2. –†–∞–∑–º–µ—â–∞–µ–º —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç
            try:
                tp_order = {
                    "category": "linear",
                    "symbol": symbol,
                    "side": close_side,
                    "orderType": "Limit",
                    "qty": str(qty),
                    "price": str(tp_price),
                    "reduceOnly": True,
                    "timeInForce": "GTC"
                }

                tp_response = await self.place_order_with_retry(tp_order, symbol, max_retries=5)
                if tp_response:
                    self.logger.info(f"‚úÖ Take-Profit (Limit) —Ä–∞–∑–º–µ—â–µ–Ω –¥–ª—è {symbol}: {tp_price}")
                    tp_success = True
                else:
                    self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è Take-Profit –¥–ª—è {symbol}")

            except Exception as e:
                self.logger.error(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Ä–∞–∑–º–µ—â–µ–Ω–∏–∏ Take-Profit –¥–ª—è {symbol}: {e}")

            return sl_success and tp_success

        except Exception as e:
            self.logger.error(f"‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –∑–∞—â–∏—Ç–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤ –¥–ª—è {symbol}: {e}")
            return False

    async def place_order_with_retry(self, order_params: dict, symbol: str, max_retries: int = 3) -> dict:
        """–†–∞–∑–º–µ—â–µ–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞ —Å —ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–º –±—ç–∫–æ—Ñ—Ñ–æ–º"""
        for attempt in range(max_retries):
            try:
                order = await self.connector.place_order(order_params)

                if order is None:
                    self.api_errors[symbol] = self.api_errors.get(symbol, 0) + 1
                    error_count = self.api_errors[symbol]

                    self.logger.error(f"‚ùå –ü–æ–ª—É—á–µ–Ω None –æ—Ç–≤–µ—Ç –æ—Ç Bybit –¥–ª—è {symbol} (–æ—à–∏–±–∫–∞ #{error_count})")

                    if attempt < max_retries - 1:
                        # –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞: 1s, 2s, 4s
                        wait_time = (2 ** attempt)
                        await asyncio.sleep(wait_time)
                        continue
                    return None

                ret_code = order.get("retCode")
                ret_msg = order.get("retMsg", "Unknown error")

                if ret_code == 0:
                    return order

                # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫
                if ret_code == 110017:  # "current position is zero"
                    self.logger.warning(f"‚ö†Ô∏è –ü–æ–∑–∏—Ü–∏—è –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–Ω–∞ –¥–ª—è {symbol}, –ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}")
                    if attempt < max_retries - 1:
                        await asyncio.sleep(1.0)  # –ñ–¥–µ–º –¥–æ–ª—å—à–µ –¥–ª—è —ç—Ç–æ–π –æ—à–∏–±–∫–∏
                        continue

                elif ret_code == 10001:  # Minimum size error
                    current_qty = float(order_params['qty'])
                    symbol_info = await self.get_symbol_info(symbol)
                    min_qty = symbol_info['minOrderQty']

                    if current_qty < min_qty:
                        new_qty = min_qty * 1.1
                        order_params['qty'] = str(round(new_qty, QTY_PRECISION.get(symbol, 3)))
                        self.logger.warning(f"Adjusting qty from {current_qty} to {new_qty} for {symbol}")

                        if attempt < max_retries - 1:
                            await asyncio.sleep(1)
                            continue

                elif ret_code in [10002, 10003]:  # Balance errors
                    self.logger.error(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–π –±–∞–ª–∞–Ω—Å –¥–ª—è {symbol}")
                    await self.send_telegram(f"‚ùå {symbol} –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–π –±–∞–ª–∞–Ω—Å")
                    break

                else:
                    self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–∞: –∫–æ–¥ {ret_code}, —Å–æ–æ–±—â–µ–Ω–∏–µ: {ret_msg}")
                    if attempt < max_retries - 1:
                        await asyncio.sleep(2 ** attempt)
                        continue

                break

            except Exception as e:
                self.logger.error(f"Exception on attempt {attempt + 1} for {symbol}: {e}")
                if attempt < max_retries - 1:
                    await asyncio.sleep(2 ** attempt)

        return None

    async def check_pending_orders(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –æ–∂–∏–¥–∞—é—â–∏—Ö –æ—Ä–¥–µ—Ä–æ–≤"""
        for symbol in list(self.pending_orders.keys()):
            try:
                pending = self.pending_orders[symbol]
                order_id = pending["order_id"]
                pending["attempts"] += 1

                # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –æ—Ä–¥–µ—Ä–∞
                status = await self.connector.get_order_status(symbol, order_id)

                self.logger.debug(f"Order {order_id} status: {status} (attempt {pending['attempts']})")

                if status == "Filled":
                    # –û—Ä–¥–µ—Ä –∏—Å–ø–æ–ª–Ω–µ–Ω
                    await self._handle_filled_order(symbol, pending)

                elif status in ["Cancelled", "Rejected", "Expired"]:
                    # –û—Ä–¥–µ—Ä –æ—Ç–º–µ–Ω–µ–Ω
                    await self._handle_cancelled_order(symbol, pending, status)

                elif status in ["Unknown", None]:
                    # –ù–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å - –ø—Ä–æ–≤–µ—Ä—è–µ–º —á–µ—Ä–µ–∑ –ø–æ–∑–∏—Ü–∏–∏
                    await self._handle_unknown_status(symbol, pending)

                elif pending["attempts"] > 20:  # –¢–∞–π–º–∞—É—Ç
                    await self._handle_timeout_order(symbol, pending)

            except Exception as e:
                self.logger.error(f"Pending order check error for {symbol}: {e}")
                if symbol in self.pending_orders:
                    self.pending_orders[symbol]["attempts"] += 1

    async def _handle_filled_order(self, symbol: str, pending: dict):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏—Å–ø–æ–ª–Ω–µ–Ω–Ω–æ–≥–æ –æ—Ä–¥–µ—Ä–∞"""
        trade = pending["trade"]
        order_id = pending["order_id"]

        self.positions[symbol] = {
            "entry_price": trade["entry"],
            "sl": trade["sl"],
            "tp": trade["tp"],
            "side": pending["direction"],
            "order_id": order_id,
            "qty": pending["qty"],
            "created_at": datetime.utcnow()
        }

        del self.pending_orders[symbol]

        await self.send_telegram(
            f"‚úÖ <b>{symbol}</b> order filled!\n"
            f"ID: {order_id}\n"
            f"Entry: {trade['entry']:.4f}\n"
            f"Direction: {pending['direction']}\n"
            f"Qty: {pending['qty']}"
        )

    async def _handle_cancelled_order(self, symbol: str, pending: dict, status: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–Ω–æ–≥–æ –æ—Ä–¥–µ—Ä–∞"""
        order_id = pending["order_id"]
        del self.pending_orders[symbol]

        await self.send_telegram(
            f"‚ùå <b>{symbol}</b> order {status.lower()}\n"
            f"ID: {order_id}"
        )

    async def _handle_unknown_status(self, symbol: str, pending: dict):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞"""
        order_id = pending["order_id"]

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–æ–∑–∏—Ü–∏–∏
        try:
            positions = await self.connector.get_positions(symbol)
            has_position = False

            # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–∑–∏—Ü–∏–π
            if positions and len(positions) > 0:
                has_position = any(float(pos.get('size', 0)) != 0 for pos in positions)

            if has_position:
                await self._handle_filled_order(symbol, pending)
            elif pending["attempts"] > 10:
                # –ü—Ä–µ–∫—Ä–∞—â–∞–µ–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ
                del self.pending_orders[symbol]
                await self.send_telegram(
                    f"‚è∞ <b>{symbol}</b> tracking stopped\n"
                    f"ID: {order_id}\n"
                    f"Status unclear after {pending['attempts']} checks"
                )
        except Exception as e:
            self.logger.error(f"Error checking positions for {symbol}: {e}")

    async def _handle_timeout_order(self, symbol: str, pending: dict):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ä–¥–µ—Ä–∞ –ø–æ —Ç–∞–π–º–∞—É—Ç—É"""
        order_id = pending["order_id"]

        # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–º–µ–Ω–∏—Ç—å –æ—Ä–¥–µ—Ä
        try:
            cancel_result = await self.connector.cancel_order(symbol, order_id)
            del self.pending_orders[symbol]

            await self.send_telegram(
                f"‚è∞ <b>{symbol}</b> order timeout\n"
                f"ID: {order_id}\n"
                f"Cancellation: {'‚úÖ' if cancel_result else '‚ùå'}"
            )
        except Exception as e:
            self.logger.error(f"Error cancelling order {order_id}: {e}")

    async def check_positions(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π"""
        for symbol, pos in list(self.positions.items()):
            try:
                # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É
                price_data = await self.connector.get_last_price(symbol)
                if not price_data:
                    continue

                current_price = float(price_data['last_price'])
                direction = pos["side"]
                entry_price = pos["entry_price"]
                sl_price = pos["sl"]
                tp_price = pos["tp"]

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º SL/TP
                sl_hit, tp_hit = self._check_sl_tp(current_price, direction, sl_price, tp_price)

                if sl_hit:
                    await self._handle_sl_hit(symbol, pos, current_price, entry_price, direction)
                elif tp_hit:
                    await self._handle_tp_hit(symbol, pos, current_price, entry_price, direction)
                else:
                    # –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–π –æ—Ç—á–µ—Ç –æ PnL
                    await self._report_pnl(symbol, pos, current_price, entry_price, direction)

            except Exception as e:
                self.logger.error(f"Position check error for {symbol}: {e}")

    def _check_sl_tp(self, current_price: float, direction: str, sl_price: float, tp_price: float) -> tuple[bool, bool]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è SL/TP"""
        if direction == "BUY":
            sl_hit = current_price <= sl_price
            tp_hit = current_price >= tp_price
        else:  # SELL
            sl_hit = current_price >= sl_price
            tp_hit = current_price <= tp_price

        return sl_hit, tp_hit

    async def _handle_sl_hit(self, symbol: str, pos: dict, current_price: float, entry_price: float, direction: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è Stop Loss"""
        pnl_pct = self._calculate_pnl_pct(current_price, entry_price, direction)

        await self.send_telegram(
            f"‚ùå <b>{symbol}</b> SL HIT!\n"
            f"Entry: {entry_price:.4f} ‚Üí Exit: {current_price:.4f}\n"
            f"PnL: {pnl_pct:+.2f}%\n"
            f"Direction: {direction}"
        )

        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –Ω–µ—É–¥–∞—á
        self.failed_trades[symbol] = self.failed_trades.get(symbol, 0) + 1
        self.last_trade_time[symbol] = datetime.utcnow()

        failed_count = self.failed_trades[symbol]
        cooldown_minutes = 15 + (failed_count * 10)

        await self.send_telegram(
            f"üîí {symbol} blocked for {cooldown_minutes} min\n"
            f"Failed trades: {failed_count}"
        )

        del self.positions[symbol]

    async def _handle_tp_hit(self, symbol: str, pos: dict, current_price: float, entry_price: float, direction: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è Take Profit"""
        pnl_pct = self._calculate_pnl_pct(current_price, entry_price, direction)

        await self.send_telegram(
            f"‚úÖ <b>{symbol}</b> TP HIT!\n"
            f"Entry: {entry_price:.4f} ‚Üí Exit: {current_price:.4f}\n"
            f"PnL: {pnl_pct:+.2f}%\n"
            f"Direction: {direction}"
        )

        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –Ω–µ—É–¥–∞—á
        if symbol in self.failed_trades:
            del self.failed_trades[symbol]
            await self.send_telegram(f"üéØ {symbol} - failed series reset!")

        del self.positions[symbol]

    def _calculate_pnl_pct(self, current_price: float, entry_price: float, direction: str) -> float:
        """–†–∞—Å—á–µ—Ç PnL –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö"""
        if direction == "BUY":
            return ((current_price - entry_price) / entry_price) * 100
        else:  # SELL
            return ((entry_price - current_price) / entry_price) * 100

    async def _report_pnl(self, symbol: str, pos: dict, current_price: float, entry_price: float, direction: str):
        """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–π –æ—Ç—á–µ—Ç –æ PnL"""
        # –û—Ç—á–µ—Ç —Ç–æ–ª—å–∫–æ –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç
        if not hasattr(self, '_last_pnl_report'):
            self._last_pnl_report = {}

        last_report = self._last_pnl_report.get(symbol)
        if last_report and (datetime.utcnow() - last_report).seconds < 600:
            return

        pnl_pct = self._calculate_pnl_pct(current_price, entry_price, direction)
        balance = await self.get_account_balance()

        await self.send_telegram(
            f"üìä <b>{symbol}</b> PnL: {pnl_pct:+.2f}%\n"
            f"Entry: {entry_price:.4f} ‚Üí Now: {current_price:.4f}\n"
            f"üí∞ Balance: {balance:.2f} USDT"
        )

        self._last_pnl_report[symbol] = datetime.utcnow()

    async def run(self):
        """–ì–ª–∞–≤–Ω—ã–π —Ü–∏–∫–ª –±–æ—Ç–∞"""
        await self.send_telegram("ü§ñ Bot started")

        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å
        self.start_balance = await self.get_account_balance()

        if not self.start_balance or self.start_balance <= 0:
            await self.send_telegram("‚ùå Critical error: zero balance!")
            return

        cycle_count = 0

        while True:
            try:
                cycle_count += 1
                self.logger.info(f"=== Cycle {cycle_count} ===")

                # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–∂–∏–¥–∞—é—â–∏–µ –æ—Ä–¥–µ—Ä–∞
                await self.check_pending_orders()

                # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏
                await self.check_positions()

                # 3. –ò—â–µ–º –Ω–æ–≤—ã–µ —Ç–æ—Ä–≥–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏
                await self.trading_cycle()

                # –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–π –æ—Ç—á–µ—Ç
                if cycle_count % 15 == 0:  # –ö–∞–∂–¥—ã–µ 15 –º–∏–Ω—É—Ç
                    await self._send_status_report(cycle_count)

                # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –∫–∞–∂–¥—ã–µ 30 —Ü–∏–∫–ª–æ–≤
                if cycle_count % 30 == 0:
                    self.start_balance = await self.get_account_balance()

                await asyncio.sleep(60)  # 1 –º–∏–Ω—É—Ç–∞ –º–µ–∂–¥—É —Ü–∏–∫–ª–∞–º–∏

            except Exception as e:
                self.logger.error(f"Main loop error: {e}")
                await self.send_telegram(f"‚ö†Ô∏è Main loop error: {str(e)}")
                await asyncio.sleep(30)

    async def _send_status_report(self, cycle_count: int):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –±–æ—Ç–∞"""
        try:
            total_api_errors = sum(self.api_errors.values())
            blocked_symbols = len([s for s in self.symbols if s in self.last_trade_time])
            current_balance = await self.get_account_balance()

            balance_change = 0.0
            if self.start_balance and self.start_balance > 0:
                balance_change = ((current_balance - self.start_balance) / self.start_balance) * 100

            await self.send_telegram(
                f"üìà Bot Status (cycle {cycle_count}):\n"
                f"‚Ä¢ Active positions: {len(self.positions)}\n"
                f"‚Ä¢ Pending orders: {len(self.pending_orders)}\n"
                f"‚Ä¢ Blocked symbols: {blocked_symbols}\n"
                f"‚Ä¢ API errors: {total_api_errors}\n"
                f"‚Ä¢ Balance: {current_balance:.2f} USDT ({balance_change:+.2f}%)"
            )
        except Exception as e:
            self.logger.error(f"Status report error: {e}")


if __name__ == "__main__":
    bot = TradingBot()
    try:
        asyncio.run(bot.run())
    except KeyboardInterrupt:
        bot.logger.info("Bot stopped by user")
    except Exception as e:
        bot.logger.critical(f"Fatal error: {e}")