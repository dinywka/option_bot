# #app.py
# import asyncio
# import logging
# import os
# from datetime import datetime
# from decimal import Decimal
# from telegram import Bot
# from connectors.bybit_connector import BybitConnector
# from strategies.enhanced_sr import EnhancedSRStrategy
# from config.settings import SYMBOLS, RISK_PERCENT, LEVERAGE
# from config.paths import LOG_DIR
# from config.settings import MIN_QTY
# from datetime import datetime
#
#
#
# class TradingBot:
#     def __init__(self):
#         self.logger = logging.getLogger('TradingBot')
#         self.connector = BybitConnector()
#         self.tg_bot = Bot(token=os.getenv("BOT_TOKEN"))
#         self.chat_id = os.getenv("CHAT_ID")
#         self.symbols = SYMBOLS
#         self.positions = {}
#         self.start_balance = None
#         self.setup_logging()
#
#     def setup_logging(self):
#         level = os.getenv("LOG_LEVEL", "INFO")
#         logging.basicConfig(
#             level=level,
#             format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
#             handlers=[
#                 logging.FileHandler(LOG_DIR / 'trading_bot.log'),
#                 logging.StreamHandler()
#             ]
#         )
#
#     async def send_telegram(self, message: str):
#         try:
#             await self.tg_bot.send_message(
#                 chat_id=self.chat_id,
#                 text=f"<b>{datetime.utcnow().strftime('%H:%M:%S')}</b>\n{message}",
#                 parse_mode='HTML'
#             )
#         except Exception as e:
#             self.logger.error(f"Telegram error: {str(e)}")
#
#     async def send_message(self, text: str):
#         await self.send_telegram(text)
#
#     async def get_account_balance(self):
#         balance = await self.connector.get_wallet_balance()
#         self.logger.info(f"Current balance: {balance}")
#
#         if not balance or balance <= 0:
#             await self.send_telegram("‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ: –Ω—É–ª–µ–≤–æ–π –±–∞–ª–∞–Ω—Å –Ω–∞ —Å—á–µ—Ç–µ!")
#
#         return balance
#
#     def calculate_position_size(self, price: float) -> float:
#         if not self.start_balance:
#             self.logger.warning("Start balance is None!")
#             return 0.0
#         risk_amount = self.start_balance * (RISK_PERCENT / 100)
#         return risk_amount / price
#
#     async def trading_cycle(self):
#         for symbol in self.symbols:
#             data = await self.connector.get_klines(symbol)
#             if data is None:
#                 continue
#
#             strategy = EnhancedSRStrategy(data)
#             trade = strategy.generate_signal(data)
#
#             if trade:
#                 await self.place_order(symbol, trade)
#
#
#     async def place_order(self, symbol: str, trade: dict):
#         try:
#             direction = trade["signal"]
#             sl = trade["sl"]
#             tp = trade["tp"]
#             entry_price = trade["entry"]
#
#             qty = max(self.calculate_position_size(entry_price), MIN_QTY.get(symbol, 0.001))
#             self.logger.info(f"üí∞ –†–∞—Å—á—ë—Ç –ø–æ–∑–∏—Ü–∏–∏: qty={qty}, entry={entry_price}, balance={self.start_balance}")
#
#             if qty <= 0:
#                 self.logger.warning(f"Zero quantity for {symbol}")
#                 return
#
#             order_params = {
#                 'category': 'linear',
#                 'symbol': symbol,
#                 'side': 'Buy' if direction == 'BUY' else 'Sell',
#                 'orderType': 'Market',
#                 'qty': round(qty, 3),
#                 'leverage': LEVERAGE
#             }
#
#             self.logger.info(f"üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ä–¥–µ—Ä–∞: {order_params}")
#             order = await self.connector.place_order(order_params)
#
#
#             if order is None or order.get("retCode") != 0:
#                 err_msg = order.get('retMsg') if order else "None response"
#                 self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–∞: {err_msg}")
#                 await self.send_telegram(f"‚ùå –û—Ä–¥–µ—Ä –Ω–µ —Ä–∞–∑–º–µ—â—ë–Ω: {err_msg}")
#                 return
#
#             order_id = order.get("result", {}).get("orderId")
#             time_now = datetime.utcnow().strftime("%H:%M:%S")
#
#             if order_id:
#                 await asyncio.sleep(1.5)
#                 status = self.connector.get_order_status(symbol, order_id)
#
#                 if status != "Filled":
#                     self.logger.warning(f"‚ö†Ô∏è –û—Ä–¥–µ—Ä {order_id} –Ω–µ –∏—Å–ø–æ–ª–Ω–µ–Ω! –°—Ç–∞—Ç—É—Å: {status}")
#                     await self.send_message(f"{time_now}\n‚ö†Ô∏è –û—Ä–¥–µ—Ä –Ω–µ –∏—Å–ø–æ–ª–Ω–µ–Ω: —Å—Ç–∞—Ç—É—Å {status}")
#                 else:
#                     self.logger.info(f"‚úÖ –û—Ä–¥–µ—Ä –∏—Å–ø–æ–ª–Ω–µ–Ω: {order_id}")
#                     await self.send_message(f"{time_now}\n‚úÖ –û—Ä–¥–µ—Ä –∏—Å–ø–æ–ª–Ω–µ–Ω: {order_id}")
#             else:
#                 self.logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å order_id –æ—Ç Bybit!")
#                 await self.send_message(f"{time_now}\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–º–µ—â–µ–Ω–∏–∏ –æ—Ä–¥–µ—Ä–∞")
#
#             await self.send_telegram(
#                 f"üì• <b>{symbol} {direction}</b>\n"
#                 f"Entry: {entry_price:.2f}\n"
#                 f"SL: {sl:.2f}\n"
#                 f"TP: {tp:.2f}"
#             )
#
#             self.positions[symbol] = {
#                 "entry_price": entry_price,
#                 "sl": sl,
#                 "tp": tp,
#                 "side": direction
#             }
#
#         except Exception as e:
#             self.logger.error(f"‚ùå Order failed: {str(e)}")
#             await self.send_telegram(f"‚ùå Order error: {str(e)}")
#
#     async def check_positions(self):
#         for symbol, pos in list(self.positions.items()):
#             try:
#                 price_data = await self.connector.get_last_price(symbol)
#                 current_price = float(price_data['last_price'])
#                 direction = pos["side"]
#
#                 # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ SL / TP
#                 sl_hit = direction == "BUY" and current_price <= pos["sl"] \
#                     or direction == "SELL" and current_price >= pos["sl"]
#
#                 tp_hit = direction == "BUY" and current_price >= pos["tp"] \
#                     or direction == "SELL" and current_price <= pos["tp"]
#
#                 if sl_hit:
#                     await self.send_telegram(
#                         f"‚ùå <b>{symbol}</b> SL hit at {current_price:.2f}"
#                     )
#                     del self.positions[symbol]
#                     continue
#
#                 if tp_hit:
#                     await self.send_telegram(
#                         f"‚úÖ <b>{symbol}</b> TP hit at {current_price:.2f}"
#                     )
#                     del self.positions[symbol]
#                     continue
#
#                 # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ PnL
#                 entry = pos['entry_price']
#                 pnl = (current_price - entry) / entry * 100
#                 if direction == 'SELL':
#                     pnl *= -1
#
#                 balance = await self.connector.get_wallet_balance()
#
#                 await self.send_telegram(
#                     f"üìä {symbol} PnL: {pnl:.2f}%\n"
#                     f"Entry: {entry:.2f}\n"
#                     f"Price: {current_price:.2f}"
#                     f"üí∞ Balance: {balance:.2f} USDT"
#                 )
#
#             except Exception as e:
#                 self.logger.error(f"Position check error: {str(e)}")
#
#     async def run(self):
#         await self.send_telegram("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
#         self.start_balance = await self.get_account_balance()
#
#         while True:
#             try:
#                 await self.trading_cycle()
#                 await self.check_positions()
#                 await asyncio.sleep(60)  # –∫–∞–∂–¥—ã–π —Ü–∏–∫–ª 1 –º–∏–Ω—É—Ç–∞
#             except Exception as e:
#                 self.logger.error(f"Main loop error: {str(e)}")
#                 await asyncio.sleep(30)
#
#
# if __name__ == "__main__":
#     bot = TradingBot()
#     try:
#         asyncio.run(bot.run())
#     except KeyboardInterrupt:
#         bot.logger.info("Bot stopped by user")
#     except Exception as e:
#         bot.logger.critical(f"Fatal error: {str(e)}")

# app.py
import asyncio
import logging
import os
from datetime import datetime, timedelta
from decimal import Decimal, ROUND_DOWN
from telegram import Bot
import time
from connectors.bybit_connector import BybitConnector
from strategies.enhanced_sr import EnhancedSRStrategy
from config.settings import SYMBOLS, RISK_PERCENT, LEVERAGE, MIN_QTY, LOG_DIR, QTY_PRECISION

import asyncio
import logging
import os
from datetime import datetime, timedelta
from logging.handlers import RotatingFileHandler
from telegram import Bot


class TradingBot:
    def __init__(self):
        self.logger = logging.getLogger('TradingBot')
        self.connector = BybitConnector()
        self.tg_bot = Bot(token=os.getenv("BOT_TOKEN"))
        self.chat_id = os.getenv("CHAT_ID")
        self.symbols = SYMBOLS
        self.positions = {}
        self.pending_orders = {}
        self.last_trade_time = {}
        self.failed_trades = {}
        self.api_errors = {}
        self.start_balance = None
        self.symbol_info = {}
        self.emergency_stop = False
        self.max_daily_loss = 0.05
        self.daily_start_balance = None
        self._last_pnl_report = {}
        self.setup_logging()

    def setup_logging(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å —Ä–æ—Ç–∞—Ü–∏–µ–π —Ñ–∞–π–ª–æ–≤"""
        level = os.getenv("LOG_LEVEL", "INFO")

        # –°–æ–∑–¥–∞–µ–º —Ñ–æ—Ä–º–∞—Ç—Ç–µ—Ä
        formatter = logging.Formatter(
            '%(asctime)s - %(name)s - %(levelname)s - %(message)s'
        )

        # –§–∞–π–ª–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å —Ä–æ—Ç–∞—Ü–∏–µ–π
        file_handler = RotatingFileHandler(
            LOG_DIR / 'trading_bot.log',
            maxBytes=10 * 1024 * 1024,  # 10MB
            backupCount=5
        )
        file_handler.setFormatter(formatter)
        file_handler.setLevel(logging.DEBUG)

        # –ö–æ–Ω—Å–æ–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
        console_handler = logging.StreamHandler()
        console_handler.setFormatter(formatter)
        console_handler.setLevel(getattr(logging, level))

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
        self.logger.setLevel(logging.DEBUG)
        self.logger.addHandler(file_handler)
        self.logger.addHandler(console_handler)

        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫
        critical_handler = logging.FileHandler('critical_errors.log')
        critical_handler.setLevel(logging.ERROR)
        critical_formatter = logging.Formatter(
            '%(asctime)s - CRITICAL - %(name)s - %(levelname)s - %(message)s'
        )
        critical_handler.setFormatter(critical_formatter)
        self.logger.addHandler(critical_handler)

    async def send_telegram(self, message: str):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
        try:
            await self.tg_bot.send_message(
                chat_id=self.chat_id,
                text=f"<b>{datetime.utcnow().strftime('%H:%M:%S')}</b>\n{message}",
                parse_mode='HTML'
            )
        except Exception as e:
            self.logger.error(f"Telegram error: {str(e)}")

    async def get_account_balance(self) -> float:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –∞–∫–∫–∞—É–Ω—Ç–∞"""
        try:
            balance = await self.connector.get_wallet_balance()
            self.logger.info(f"üí∞ Current balance: {balance}")

            if not balance or balance <= 0:
                await self.send_telegram("‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ: –Ω—É–ª–µ–≤–æ–π –±–∞–ª–∞–Ω—Å –Ω–∞ —Å—á–µ—Ç–µ!")
                return 0.0

            return balance
        except Exception as e:
            self.logger.error(f"‚ùå Error getting balance: {e}")
            return 0.0

    async def get_symbol_info(self, symbol: str) -> dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–∏–º–≤–æ–ª–µ —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
        if symbol in self.symbol_info:
            return self.symbol_info[symbol]

        try:
            info = await self.connector.get_instruments_info(symbol)
            if info:
                self.symbol_info[symbol] = info
                self.logger.info(f"üìã Loaded symbol info for {symbol}: {info}")
                return info
        except Exception as e:
            self.logger.error(f"‚ùå Failed to get symbol info for {symbol}: {e}")

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        default_info = {
            'minOrderQty': MIN_QTY.get(symbol, 0.001),
            'maxOrderQty': 1000.0,
            'qtyStep': 0.001,
            'minOrderAmt': 1.0,
            'tickSize': 0.01
        }
        self.symbol_info[symbol] = default_info
        self.logger.warning(f"‚ö†Ô∏è Using default symbol info for {symbol}")
        return default_info

    async def calculate_position_size(self, entry_price: float, symbol: str) -> tuple[float, bool]:
        """–†–∞—Å—á–µ—Ç —Ä–∞–∑–º–µ—Ä–∞ –ø–æ–∑–∏—Ü–∏–∏ —Å —É—á–µ—Ç–æ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å
            balance = await self.get_account_balance()
            if balance < 10:
                self.logger.warning(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–π –±–∞–ª–∞–Ω—Å –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏: {balance}")
                return 0.0, False

            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—É–º–º—É —Ä–∏—Å–∫–∞ (1% –æ—Ç –±–∞–ª–∞–Ω—Å–∞)
            risk_amount = balance * 0.01

            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∏–º–≤–æ–ª–µ
            symbol_info = await self.get_symbol_info(symbol)

            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—ã—Ä–æ–π —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏
            raw_qty = risk_amount / entry_price

            # –ü—Ä–∏–º–µ–Ω—è–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —Å–∏–º–≤–æ–ª–∞
            min_qty = symbol_info['minOrderQty']
            max_qty = symbol_info['maxOrderQty']
            qty_step = symbol_info['qtyStep']

            # –û–∫—Ä—É–≥–ª—è–µ–º –¥–æ –≤–∞–ª–∏–¥–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
            adjusted_qty = max(min_qty, raw_qty)
            adjusted_qty = round(adjusted_qty / qty_step) * qty_step
            adjusted_qty = min(adjusted_qty, max_qty)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –æ—Ä–¥–µ—Ä–∞
            order_value = adjusted_qty * entry_price
            min_order_amt = symbol_info.get('minOrderAmt', 1.0)

            if order_value < min_order_amt:
                adjusted_qty = min_order_amt / entry_price
                adjusted_qty = round(adjusted_qty / qty_step) * qty_step

            # –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
            final_order_value = adjusted_qty * entry_price
            max_order_value = balance * 0.02  # –ù–µ –±–æ–ª—å—à–µ 2% –±–∞–ª–∞–Ω—Å–∞

            if final_order_value > max_order_value:
                self.logger.error(f"‚ùå –û—Ä–¥–µ—Ä —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –¥–ª—è {symbol}: {final_order_value} > {max_order_value}")
                return 0.0, False

            if adjusted_qty < min_qty:
                self.logger.error(f"‚ùå –†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ –º–µ–Ω—å—à–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ: {adjusted_qty} < {min_qty}")
                return 0.0, False

            self.logger.info(
                f"üî¢ –†–∞—Å—á–µ—Ç –ø–æ–∑–∏—Ü–∏–∏ {symbol}: —Å—ã—Ä–æ–π={raw_qty:.6f}, –∏—Ç–æ–≥–æ–≤—ã–π={adjusted_qty:.6f}, —Å—Ç–æ–∏–º–æ—Å—Ç—å={final_order_value:.2f}")

            return adjusted_qty, True

        except Exception as e:
            self.logger.error(f"‚ùå Error calculating position size for {symbol}: {e}")
            return 0.0, False

    async def can_trade(self, symbol: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Ç–æ—Ä–≥–æ–≤–ª–∏ —Å–∏–º–≤–æ–ª–æ–º"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤–∞—Ä–∏–π–Ω—É—é –æ—Å—Ç–∞–Ω–æ–≤–∫—É
            if self.emergency_stop:
                return False

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏
            if symbol in self.positions:
                self.logger.debug(f"‚ùå {symbol} —É–∂–µ –≤ –ø–æ–∑–∏—Ü–∏—è—Ö")
                return False

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–∂–∏–¥–∞—é—â–∏–µ –æ—Ä–¥–µ—Ä–∞
            if symbol in self.pending_orders:
                self.logger.debug(f"‚ùå {symbol} –∏–º–µ–µ—Ç –æ–∂–∏–¥–∞—é—â–∏–π –æ—Ä–¥–µ—Ä")
                return False

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º cooldown —Å —É—á–µ—Ç–æ–º –Ω–µ—É–¥–∞—á–Ω—ã—Ö —Å–¥–µ–ª–æ–∫
            last_time = self.last_trade_time.get(symbol)
            if last_time:
                failed_count = self.failed_trades.get(symbol, 0)
                cooldown_minutes = 15 + (failed_count * 10)
                cooldown_minutes = min(cooldown_minutes, 120)  # –ú–∞–∫—Å–∏–º—É–º 2 —á–∞—Å–∞

                time_since = datetime.utcnow() - last_time
                if time_since < timedelta(minutes=cooldown_minutes):
                    self.logger.debug(f"‚ùå {symbol} –≤ cooldown –µ—â–µ {cooldown_minutes - time_since.seconds // 60} –º–∏–Ω")
                    return False

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–∞—Å—Ç–æ—Ç—É –æ—à–∏–±–æ–∫ API
            api_error_count = self.api_errors.get(symbol, 0)
            if api_error_count >= 5:
                if last_time and (datetime.utcnow() - last_time) < timedelta(hours=1):
                    self.logger.debug(f"‚ùå {symbol} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∏–∑-–∑–∞ —á–∞—Å—Ç—ã—Ö –æ—à–∏–±–æ–∫ API")
                    return False

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å
            balance = await self.get_account_balance()
            if balance < 10:
                self.logger.debug(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–π –±–∞–ª–∞–Ω—Å: {balance}")
                return False

            return True

        except Exception as e:
            self.logger.error(f"‚ùå Error in can_trade for {symbol}: {e}")
            return False

    async def place_order_with_retry(self, order_params: dict, symbol: str, max_retries: int = 3) -> dict:
        """–†–∞–∑–º–µ—â–µ–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞ —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏"""
        for attempt in range(max_retries):
            try:
                self.logger.info(f"üì§ –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{max_retries} —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–∞ {symbol}: {order_params}")

                order = await self.connector.place_order(order_params)

                if order is None:
                    self.api_errors[symbol] = self.api_errors.get(symbol, 0) + 1
                    self.logger.error(f"‚ùå –ü–æ–ª—É—á–µ–Ω None –æ—Ç–≤–µ—Ç –æ—Ç Bybit –¥–ª—è {symbol}")

                    if attempt < max_retries - 1:
                        wait_time = (2 ** attempt)
                        await asyncio.sleep(wait_time)
                        continue
                    return None

                ret_code = order.get("retCode")
                ret_msg = order.get("retMsg", "Unknown error")

                if ret_code == 0:
                    self.logger.info(f"‚úÖ –û—Ä–¥–µ—Ä —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–º–µ—â–µ–Ω –¥–ª—è {symbol}")
                    return order

                # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫
                if ret_code == 110017:  # "current position is zero"
                    self.logger.warning(f"‚ö†Ô∏è –ü–æ–∑–∏—Ü–∏—è –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–Ω–∞ –¥–ª—è {symbol}, –ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}")
                    if attempt < max_retries - 1:
                        await asyncio.sleep(2.0)
                        continue

                elif ret_code == 10001:  # Minimum size error
                    current_qty = float(order_params['qty'])
                    symbol_info = await self.get_symbol_info(symbol)
                    min_qty = symbol_info['minOrderQty']

                    if current_qty < min_qty:
                        new_qty = min_qty * 1.1
                        order_params['qty'] = str(round(new_qty, 6))
                        self.logger.warning(f"‚ö†Ô∏è Adjusting qty from {current_qty} to {new_qty} for {symbol}")

                        if attempt < max_retries - 1:
                            await asyncio.sleep(1)
                            continue

                elif ret_code in [10002, 10003]:  # Balance errors
                    self.logger.error(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–π –±–∞–ª–∞–Ω—Å –¥–ª—è {symbol}")
                    await self.send_telegram(f"‚ùå {symbol} –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–π –±–∞–ª–∞–Ω—Å")
                    break

                self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–∞ {symbol}: –∫–æ–¥ {ret_code}, —Å–æ–æ–±—â–µ–Ω–∏–µ: {ret_msg}")
                if attempt < max_retries - 1:
                    await asyncio.sleep(2 ** attempt)

            except Exception as e:
                self.logger.error(f"‚ùå Exception on attempt {attempt + 1} for {symbol}: {e}")
                if attempt < max_retries - 1:
                    await asyncio.sleep(2 ** attempt)

        return None

    async def wait_for_position(self, symbol: str, expected_qty: float, timeout: int = 20) -> tuple[bool, float]:
        """–û–∂–∏–¥–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏ —Å –∫–æ–Ω—Ç—Ä–æ–ª–µ–º —Ä–∞–∑–º–µ—Ä–∞"""
        self.logger.info(f"‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è {symbol} (–æ–∂–∏–¥–∞–µ–º: {expected_qty})...")

        for attempt in range(timeout):
            try:
                positions = await self.connector.get_positions(symbol)

                if positions and len(positions) > 0:
                    for pos in positions:
                        pos_size = abs(float(pos.get('size', 0)))

                        if pos_size > 0:
                            # –ö–æ–Ω—Ç—Ä–æ–ª—å —Ä–∞–∑–º–µ—Ä–∞: –µ—Å–ª–∏ –ø–æ–∑–∏—Ü–∏—è –±–æ–ª—å—à–µ —á–µ–º –≤ 2 —Ä–∞–∑–∞ - –ø—Ä–æ–±–ª–µ–º–∞
                            if pos_size > expected_qty * 2:
                                self.logger.error(
                                    f"üö® –ö–†–ò–¢–ò–ß–ù–û! –†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ {symbol} –ø—Ä–µ–≤—ã—à–µ–Ω: "
                                    f"–æ–∂–∏–¥–∞–ª–∏ {expected_qty}, –ø–æ–ª—É—á–∏–ª–∏ {pos_size}"
                                )
                                await self.emergency_close_excess_position(symbol, expected_qty, pos_size)
                                return True, expected_qty

                            # –ï—Å–ª–∏ —Ä–∞–∑–º–µ—Ä –≤ —Ä–∞–∑—É–º–Ω—ã—Ö –ø—Ä–µ–¥–µ–ª–∞—Ö
                            elif pos_size >= expected_qty * 0.8:  # 80% –æ—Ç –æ–∂–∏–¥–∞–µ–º–æ–≥–æ
                                self.logger.info(f"‚úÖ –ü–æ–∑–∏—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞ –¥–ª—è {symbol}: —Ä–∞–∑–º–µ—Ä={pos_size}")
                                return True, pos_size

                            # –ß–∞—Å—Ç–∏—á–Ω–æ–µ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–µ
                            elif pos_size > 0:
                                self.logger.info(f"üìä –ß–∞—Å—Ç–∏—á–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è {symbol}: {pos_size}")
                                if attempt >= timeout // 2:
                                    return True, pos_size

                await asyncio.sleep(1)

            except Exception as e:
                self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–∑–∏—Ü–∏–∏ {symbol}: {e}")
                await asyncio.sleep(1)

        self.logger.warning(f"‚ö†Ô∏è –ü–æ–∑–∏—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è {symbol} –∑–∞ {timeout} —Å–µ–∫—É–Ω–¥")
        return False, 0.0

    async def emergency_close_excess_position(self, symbol: str, expected_qty: float, actual_qty: float):
        """–≠–∫—Å—Ç—Ä–µ–Ω–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ –∏–∑–ª–∏—à–∫–∞ –ø–æ–∑–∏—Ü–∏–∏"""
        try:
            excess_qty = actual_qty - expected_qty
            self.logger.warning(f"üö® –≠–∫—Å—Ç—Ä–µ–Ω–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ –∏–∑–ª–∏—à–∫–∞ {symbol}: {excess_qty}")

            positions = await self.connector.get_positions(symbol)
            if not positions:
                return

            position = positions[0]
            pos_side = position.get('side', '')
            close_side = "Sell" if pos_side == "Buy" else "Buy"

            close_params = {
                "category": "linear",
                "symbol": symbol,
                "side": close_side,
                "orderType": "Market",
                "qty": str(round(excess_qty, 6)),
                "reduceOnly": True
            }

            response = await self.connector.place_order(close_params)

            if response and response.get("retCode") == 0:
                self.logger.info(f"‚úÖ –ò–∑–ª–∏—à–µ–∫ {symbol} –∑–∞–∫—Ä—ã—Ç: {excess_qty}")
                await self.send_telegram(f"üö® –ó–∞–∫—Ä—ã—Ç –∏–∑–ª–∏—à–µ–∫ –ø–æ–∑–∏—Ü–∏–∏ {symbol}: {excess_qty}")
            else:
                self.logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–∫—Ä—ã—Ç—å –∏–∑–ª–∏—à–µ–∫ {symbol}: {response}")

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–≥–æ –∑–∞–∫—Ä—ã—Ç–∏—è {symbol}: {e}")

    async def place_protective_orders(self, symbol: str, side: str, entry_price: float,
                                      sl_price: float, tp_price: float, qty: float) -> bool:
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞—â–∏—Ç–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤ SL/TP"""
        self.logger.info(f"üõ° –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞—â–∏—Ç–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤ –¥–ª—è {symbol}: SL={sl_price}, TP={tp_price}")

        try:
            # –ú–µ—Ç–æ–¥ 1: –ü—ã—Ç–∞–µ–º—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å set_trading_stop
            success = await self.set_trading_stop(symbol, sl_price, tp_price)
            if success:
                self.logger.info(f"‚úÖ set_trading_stop —É—Å–ø–µ—à–Ω–æ –¥–ª—è {symbol}")
                return True

            # –ú–µ—Ç–æ–¥ 2: Fallback - –∏—Å–ø–æ–ª—å–∑—É–µ–º reduce-only –æ—Ä–¥–µ—Ä–∞
            self.logger.info(f"üîÑ Fallback: —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ reduce-only –æ—Ä–¥–µ—Ä–æ–≤ –¥–ª—è {symbol}")
            success = await self.place_reduce_only_orders(symbol, side, sl_price, tp_price, qty)

            return success

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞—â–∏—Ç–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤ {symbol}: {e}")
            return False

    async def set_trading_stop(self, symbol: str, sl_price: float, tp_price: float, max_attempts: int = 3) -> bool:
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ SL/TP —á–µ—Ä–µ–∑ set_trading_stop"""
        for attempt in range(1, max_attempts + 1):
            try:
                if attempt > 1:
                    await asyncio.sleep(2)

                result = await self.connector.set_trading_stop(
                    symbol=symbol,
                    stop_loss=sl_price,
                    take_profit=tp_price,
                    category="linear"
                )

                self.logger.info(f"üîÅ –ü–æ–ø—ã—Ç–∫–∞ {attempt}: set_trading_stop —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {result}")

                if result and result.get("retCode") == 0:
                    self.logger.info(f"‚úÖ set_trading_stop —É—Å–ø–µ—à–Ω–æ –¥–ª—è {symbol}")
                    return True
                elif result and "not modified" in str(result.get("retMsg", "")).lower():
                    self.logger.info(f"‚ÑπÔ∏è SL/TP —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –¥–ª—è {symbol}")
                    return True
                else:
                    error_msg = result.get("retMsg", "Unknown error") if result else "No response"
                    self.logger.warning(f"‚ö†Ô∏è set_trading_stop –ø–æ–ø—ã—Ç–∫–∞ {attempt} –Ω–µ—É–¥–∞—á–Ω–∞: {error_msg}")

            except Exception as e:
                self.logger.error(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –≤ set_trading_stop –ø–æ–ø—ã—Ç–∫–∞ {attempt}: {e}")

        return False

    async def place_reduce_only_orders(self, symbol: str, side: str, sl_price: float, tp_price: float,
                                       qty: float) -> bool:
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ SL/TP —á–µ—Ä–µ–∑ reduce-only –æ—Ä–¥–µ—Ä–∞"""
        try:
            close_side = "Sell" if side == "Buy" else "Buy"
            sl_success = False
            tp_success = False

            # Stop Loss –æ—Ä–¥–µ—Ä (StopMarket)
            try:
                sl_params = {
                    "category": "linear",
                    "symbol": symbol,
                    "side": close_side,
                    "orderType": "StopMarket",
                    "qty": str(qty),
                    "stopPrice": str(sl_price),
                    "reduceOnly": True,
                    "timeInForce": "GTC"
                }

                sl_response = await self.connector.place_order(sl_params)
                if sl_response and sl_response.get("retCode") == 0:
                    sl_success = True
                    self.logger.info(f"‚úÖ SL –æ—Ä–¥–µ—Ä —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–ª—è {symbol}")
                else:
                    self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ SL –æ—Ä–¥–µ—Ä–∞: {sl_response}")

            except Exception as e:
                self.logger.error(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Ä–∞–∑–º–µ—â–µ–Ω–∏–∏ SL –æ—Ä–¥–µ—Ä–∞: {e}")

            # Take Profit –æ—Ä–¥–µ—Ä (Limit)
            try:
                tp_params = {
                    "category": "linear",
                    "symbol": symbol,
                    "side": close_side,
                    "orderType": "Limit",
                    "qty": str(qty),
                    "price": str(tp_price),
                    "reduceOnly": True,
                    "timeInForce": "GTC"
                }

                tp_response = await self.connector.place_order(tp_params)
                if tp_response and tp_response.get("retCode") == 0:
                    tp_success = True
                    self.logger.info(f"‚úÖ TP –æ—Ä–¥–µ—Ä —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–ª—è {symbol}")
                else:
                    self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ TP –æ—Ä–¥–µ—Ä–∞: {tp_response}")

            except Exception as e:
                self.logger.error(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Ä–∞–∑–º–µ—â–µ–Ω–∏–∏ TP –æ—Ä–¥–µ—Ä–∞: {e}")

            success = sl_success or tp_success
            if success:
                self.logger.info(f"‚úÖ Reduce-only –æ—Ä–¥–µ—Ä–∞ —Ä–∞–∑–º–µ—â–µ–Ω—ã –¥–ª—è {symbol} (SL={sl_success}, TP={tp_success})")
            else:
                self.logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å –Ω–∏ –æ–¥–Ω–æ–≥–æ reduce-only –æ—Ä–¥–µ—Ä–∞ –¥–ª—è {symbol}")

            return success

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ place_reduce_only_orders: {e}")
            return False

    async def place_order(self, symbol: str, trade: dict):
        """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–∞"""
        try:
            direction = trade["signal"]
            sl = trade["sl"]
            tp = trade["tp"]
            entry_price = trade["entry"]

            self.logger.info(f"üéØ –ù–∞—á–∏–Ω–∞–µ–º —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞ {symbol}: {direction} @ {entry_price}")

            # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å
            current_balance = await self.get_account_balance()
            if current_balance < 50:
                self.logger.warning(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–π –±–∞–ª–∞–Ω—Å –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏: {current_balance}")
                return

            # 2. –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏
            qty, is_valid = await self.calculate_position_size(entry_price, symbol)
            if not is_valid or qty <= 0:
                self.logger.warning(f"‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è {symbol}: {qty}")
                return

            # 3. –§–æ—Ä–º–∏—Ä—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –æ—Ä–¥–µ—Ä–∞
            order_params = {
                'category': 'linear',
                'symbol': symbol,
                'side': 'Buy' if direction == 'BUY' else 'Sell',
                'orderType': 'Market',
                'qty': str(qty)
            }

            # 4. –†–∞–∑–º–µ—â–∞–µ–º –æ—Ä–¥–µ—Ä
            order = await self.place_order_with_retry(order_params, symbol)
            if not order or order.get("retCode") != 0:
                self.logger.error(f"‚ùå –û—Ä–¥–µ—Ä –Ω–µ —Ä–∞–∑–º–µ—â–µ–Ω –¥–ª—è {symbol}")
                self.failed_trades[symbol] = self.failed_trades.get(symbol, 0) + 1
                self.last_trade_time[symbol] = datetime.utcnow()
                return

            # 5. –ü–æ–ª—É—á–∞–µ–º order_id
            result = order.get("result", {})
            order_id = result.get("orderId")
            if not order_id:
                self.logger.error(f"‚ùå –ù–µ –ø–æ–ª—É—á–µ–Ω order_id –¥–ª—è {symbol}")
                return

            # 6. –ñ–¥–µ–º —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏
            position_created, actual_qty = await self.wait_for_position(symbol, qty, timeout=15)
            if not position_created:
                self.logger.warning(f"‚ö†Ô∏è –ü–æ–∑–∏—Ü–∏—è –Ω–µ —Å–æ–∑–¥–∞–Ω–∞ –¥–ª—è {symbol}")
                await self.send_telegram(f"‚ùå {symbol} - –ø–æ–∑–∏—Ü–∏—è –Ω–µ —Å–æ–∑–¥–∞–Ω–∞")
                return

            self.logger.info(f"‚úÖ –ü–æ–∑–∏—Ü–∏—è {symbol} —Å–æ–∑–¥–∞–Ω–∞: {actual_qty}")

            # 7. –†–∞–∑–º–µ—â–∞–µ–º –∑–∞—â–∏—Ç–Ω—ã–µ –æ—Ä–¥–µ—Ä–∞
            protective_success = await self.place_protective_orders(
                symbol=symbol,
                side=order_params['side'],
                entry_price=entry_price,
                sl_price=sl,
                tp_price=tp,
                qty=actual_qty
            )

            # 8. –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ
            self.positions[symbol] = {
                "entry_price": entry_price,
                "sl": sl,
                "tp": tp,
                "side": direction,
                "order_id": order_id,
                "qty": actual_qty,
                "created_at": datetime.utcnow(),
                "protected": protective_success
            }

            # 9. –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            protection_status = "üõ° –ó–∞—â–∏—â–µ–Ω" if protective_success else "‚ö†Ô∏è –ù–µ –∑–∞—â–∏—â–µ–Ω"
            await self.send_telegram(
                f"‚úÖ <b>{symbol} {direction}</b>\n"
                f"–†–∞–∑–º–µ—Ä: {actual_qty}\n"
                f"–¶–µ–Ω–∞: {entry_price:.4f}\n"
                f"SL: {sl:.4f} | TP: {tp:.4f}\n"
                f"–°—Ç–∞—Ç—É—Å: {protection_status}"
            )

            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫–∏ –æ—à–∏–±–æ–∫ –ø—Ä–∏ —É—Å–ø–µ—Ö–µ
            if symbol in self.api_errors:
                del self.api_errors[symbol]
            if symbol in self.failed_trades:
                del self.failed_trades[symbol]

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–∞ {symbol}: {e}")
            await self.send_telegram(f"‚ùå {symbol} –æ—à–∏–±–∫–∞: {str(e)}")
            self.failed_trades[symbol] = self.failed_trades.get(symbol, 0) + 1
            self.last_trade_time[symbol] = datetime.utcnow()

    async def trading_cycle(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ç–æ—Ä–≥–æ–≤—ã–π —Ü–∏–∫–ª"""
        for symbol in self.symbols:
            try:
                if not await self.can_trade(symbol):
                    continue

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ API
                if not await self.connector.check_api_connection():
                    self.logger.warning(f"‚ö†Ô∏è API —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º {symbol}")
                    continue

                # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
                data = await self.connector.get_klines(symbol)

                if data is None or data.empty or len(data) < 50:
                    self.logger.warning(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol}")
                    continue

                self.logger.debug(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(data)} —Å–≤–µ—á–µ–π –¥–ª—è {symbol}")

                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∏–≥–Ω–∞–ª
                strategy = EnhancedSRStrategy(data)
                trade = strategy.generate_signal(data)

                if trade is not None and isinstance(trade, dict) and trade.get('signal'):
                    self.logger.info(f"üìä –°–∏–≥–Ω–∞–ª –¥–ª—è {symbol}: {trade}")
                    await self.place_order(symbol, trade)
                else:
                    self.logger.debug(f"üìä –ù–µ—Ç —Å–∏–≥–Ω–∞–ª–∞ –¥–ª—è {symbol}")

            except Exception as e:
                self.logger.error(f"‚ùå Trading cycle error for {symbol}: {e}")
                self.api_errors[symbol] = self.api_errors.get(symbol, 0) + 1
                await asyncio.sleep(5)

    async def check_positions(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π"""
        for symbol, pos in list(self.positions.items()):
            try:
                # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É
                price_data = await self.connector.get_last_price(symbol)
                if not price_data:
                    continue

                current_price = float(price_data['last_price'])
                direction = pos["side"]
                entry_price = pos["entry_price"]
                sl_price = pos["sl"]
                tp_price = pos["tp"]

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º SL/TP
                sl_hit, tp_hit = self.check_sl_tp_hit(current_price, direction, sl_price, tp_price)

                if sl_hit:
                    await self.handle_sl_hit(symbol, pos, current_price, entry_price, direction)
                elif tp_hit:
                    await self.handle_tp_hit(symbol, pos, current_price, entry_price, direction)
                else:
                    # –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–π –æ—Ç—á–µ—Ç –æ PnL
                    await self.report_pnl(symbol, pos, current_price, entry_price, direction)

            except Exception as e:
                self.logger.error(f"‚ùå Position check error for {symbol}: {e}")

    def check_sl_tp_hit(self, current_price: float, direction: str, sl_price: float, tp_price: float) -> tuple[
        bool, bool]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è SL/TP"""
        if direction == "BUY":
            sl_hit = current_price <= sl_price
            tp_hit = current_price >= tp_price
        else:  # SELL
            sl_hit = current_price >= sl_price
            tp_hit = current_price <= tp_price

        return sl_hit, tp_hit

    async def handle_sl_hit(self, symbol: str, pos: dict, current_price: float, entry_price: float, direction: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è Stop Loss"""
        pnl_pct = self.calculate_pnl_pct(current_price, entry_price, direction)

        await self.send_telegram(
            f"‚ùå <b>{symbol}</b> SL HIT!\n"
            f"Entry: {entry_price:.4f} ‚Üí Exit: {current_price:.4f}\n"
            f"PnL: {pnl_pct:+.2f}%\n"
            f"Direction: {direction}"
        )

        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –Ω–µ—É–¥–∞—á
        self.failed_trades[symbol] = self.failed_trades.get(symbol, 0) + 1
        self.last_trade_time[symbol] = datetime.utcnow()

        failed_count = self.failed_trades[symbol]
        cooldown_minutes = 15 + (failed_count * 10)

        await self.send_telegram(
            f"üîí {symbol} blocked for {cooldown_minutes} min\n"
            f"Failed trades: {failed_count}"
        )

        del self.positions[symbol]

    async def handle_tp_hit(self, symbol: str, pos: dict, current_price: float, entry_price: float, direction: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è Take Profit"""
        pnl_pct = self.calculate_pnl_pct(current_price, entry_price, direction)

        await self.send_telegram(
            f"‚úÖ <b>{symbol}</b> TP HIT!\n"
            f"Entry: {entry_price:.4f} ‚Üí Exit: {current_price:.4f}\n"
            f"PnL: {pnl_pct:+.2f}%\n"
            f"Direction: {direction}"
        )

        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –Ω–µ—É–¥–∞—á
        if symbol in self.failed_trades:
            del self.failed_trades[symbol]
            await self.send_telegram(f"üéØ {symbol} - failed series reset!")

        del self.positions[symbol]

    def calculate_pnl_pct(self, current_price: float, entry_price: float, direction: str) -> float:
        """–†–∞—Å—á–µ—Ç PnL –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö"""
        if direction == "BUY":
            return ((current_price - entry_price) / entry_price) * 100
        else:  # SELL
            return ((entry_price - current_price) / entry_price) * 100

    async def report_pnl(self, symbol: str, pos: dict, current_price: float, entry_price: float, direction: str):
        """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–π –æ—Ç—á–µ—Ç –æ PnL"""
        # –û—Ç—á–µ—Ç —Ç–æ–ª—å–∫–æ –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç
        last_report = self._last_pnl_report.get(symbol)
        if last_report and (datetime.utcnow() - last_report).seconds < 600:
            return

        pnl_pct = self.calculate_pnl_pct(current_price, entry_price, direction)
        balance = await self.get_account_balance()

        await self.send_telegram(
            f"üìä <b>{symbol}</b> PnL: {pnl_pct:+.2f}%\n"
            f"Entry: {entry_price:.4f} ‚Üí Now: {current_price:.4f}\n"
            f"üí∞ Balance: {balance:.2f} USDT"
        )

        self._last_pnl_report[symbol] = datetime.utcnow()

    async def check_pending_orders(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –æ–∂–∏–¥–∞—é—â–∏—Ö –æ—Ä–¥–µ—Ä–æ–≤"""
        for symbol in list(self.pending_orders.keys()):
            try:
                pending = self.pending_orders[symbol]
                order_id = pending["order_id"]
                pending["attempts"] += 1

                # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –æ—Ä–¥–µ—Ä–∞
                status = await self.connector.get_order_status(symbol, order_id)

                self.logger.debug(f"üìã Order {order_id} status: {status} (attempt {pending['attempts']})")

                if status == "Filled":
                    await self.handle_filled_order(symbol, pending)
                elif status in ["Cancelled", "Rejected", "Expired"]:
                    await self.handle_cancelled_order(symbol, pending, status)
                elif status in ["Unknown", None]:
                    await self.handle_unknown_status(symbol, pending)
                elif pending["attempts"] > 20:  # –¢–∞–π–º–∞—É—Ç
                    await self.handle_timeout_order(symbol, pending)

            except Exception as e:
                self.logger.error(f"‚ùå Pending order check error for {symbol}: {e}")
                if symbol in self.pending_orders:
                    self.pending_orders[symbol]["attempts"] += 1

    async def handle_filled_order(self, symbol: str, pending: dict):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏—Å–ø–æ–ª–Ω–µ–Ω–Ω–æ–≥–æ –æ—Ä–¥–µ—Ä–∞"""
        trade = pending["trade"]
        order_id = pending["order_id"]

        self.positions[symbol] = {
            "entry_price": trade["entry"],
            "sl": trade["sl"],
            "tp": trade["tp"],
            "side": pending["direction"],
            "order_id": order_id,
            "qty": pending["qty"],
            "created_at": datetime.utcnow()
        }

        del self.pending_orders[symbol]

        await self.send_telegram(
            f"‚úÖ <b>{symbol}</b> order filled!\n"
            f"ID: {order_id}\n"
            f"Entry: {trade['entry']:.4f}\n"
            f"Direction: {pending['direction']}\n"
            f"Qty: {pending['qty']}"
        )

        protective_success = await self.place_protective_orders(
            symbol=symbol,
            side='Buy' if pending["direction"] == 'BUY' else 'Sell',
            entry_price=trade["entry"],
            sl_price=trade["sl"],
            tp_price=trade["tp"],
            qty=pending["qty"]
        )

        if protective_success:
            await self.send_telegram(f"üõ° <b>{symbol}</b> - –ó–∞—â–∏—Ç–Ω—ã–µ –æ—Ä–¥–µ—Ä–∞ —Ä–∞–∑–º–µ—â–µ–Ω—ã")
        else:
            await self.send_telegram(f"‚ö†Ô∏è <b>{symbol}</b> - –û—à–∏–±–∫–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –∑–∞—â–∏—Ç–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤")

    async def handle_cancelled_order(self, symbol: str, pending: dict, status: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–Ω–æ–≥–æ –æ—Ä–¥–µ—Ä–∞"""
        order_id = pending["order_id"]
        del self.pending_orders[symbol]

        await self.send_telegram(
            f"‚ùå <b>{symbol}</b> order {status.lower()}\n"
            f"ID: {order_id}"
        )

    async def handle_unknown_status(self, symbol: str, pending: dict):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞"""
        order_id = pending["order_id"]

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–æ–∑–∏—Ü–∏–∏
        try:
            positions = await self.connector.get_positions(symbol)
            has_position = False

            if positions and len(positions) > 0:
                has_position = any(float(pos.get('size', 0)) != 0 for pos in positions)

            if has_position:
                await self.handle_filled_order(symbol, pending)
            elif pending["attempts"] > 10:
                # –ü—Ä–µ–∫—Ä–∞—â–∞–µ–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ
                del self.pending_orders[symbol]
                await self.send_telegram(
                    f"‚è∞ <b>{symbol}</b> tracking stopped\n"
                    f"ID: {order_id}\n"
                    f"Status unclear after {pending['attempts']} checks"
                )
        except Exception as e:
            self.logger.error(f"‚ùå Error checking positions for {symbol}: {e}")

    async def handle_timeout_order(self, symbol: str, pending: dict):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ä–¥–µ—Ä–∞ –ø–æ —Ç–∞–π–º–∞—É—Ç—É"""
        order_id = pending["order_id"]

        # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–º–µ–Ω–∏—Ç—å –æ—Ä–¥–µ—Ä
        try:
            cancel_result = await self.connector.cancel_order(symbol, order_id)
            del self.pending_orders[symbol]

            await self.send_telegram(
                f"‚è∞ <b>{symbol}</b> order timeout\n"
                f"ID: {order_id}\n"
                f"Cancellation: {'‚úÖ' if cancel_result else '‚ùå'}"
            )
        except Exception as e:
            self.logger.error(f"‚ùå Error cancelling order {order_id}: {e}")

    async def check_emergency_conditions(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤–∞—Ä–∏–π–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π"""
        try:
            current_balance = await self.get_account_balance()

            if self.daily_start_balance is None:
                self.daily_start_balance = current_balance
                return

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–Ω–µ–≤–Ω—É—é –ø—Ä–æ—Å–∞–¥–∫—É
            daily_loss_pct = (self.daily_start_balance - current_balance) / self.daily_start_balance

            if daily_loss_pct >= self.max_daily_loss:
                self.emergency_stop = True
                self.logger.critical(f"üö® –ê–í–ê–†–ò–ô–ù–ê–Ø –û–°–¢–ê–ù–û–í–ö–ê! –î–Ω–µ–≤–Ω–∞—è –ø—Ä–æ—Å–∞–¥–∫–∞: {daily_loss_pct:.2%}")

                await self.send_telegram(
                    f"üö® <b>–ê–í–ê–†–ò–ô–ù–ê–Ø –û–°–¢–ê–ù–û–í–ö–ê!</b>\n"
                    f"–î–Ω–µ–≤–Ω–∞—è –ø—Ä–æ—Å–∞–¥–∫–∞: {daily_loss_pct:.2%}\n"
                    f"–ù–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å: {self.daily_start_balance:.2f}\n"
                    f"–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {current_balance:.2f}\n"
                    f"–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–æ –∑–∞–≤—Ç—Ä–∞"
                )

                # –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –æ—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏
                await self.close_all_positions()

        except Exception as e:
            self.logger.error(f"‚ùå Error checking emergency conditions: {e}")

    async def close_all_positions(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ –≤—Å–µ—Ö –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π"""
        try:
            for symbol in list(self.positions.keys()):
                try:
                    positions = await self.connector.get_positions(symbol)
                    if not positions:
                        continue

                    for pos in positions:
                        pos_size = float(pos.get('size', 0))
                        if pos_size == 0:
                            continue

                        pos_side = pos.get('side', '')
                        close_side = "Sell" if pos_side == "Buy" else "Buy"

                        close_params = {
                            "category": "linear",
                            "symbol": symbol,
                            "side": close_side,
                            "orderType": "Market",
                            "qty": str(abs(pos_size)),
                            "reduceOnly": True
                        }

                        response = await self.connector.place_order(close_params)

                        if response and response.get("retCode") == 0:
                            self.logger.info(f"üö® –ê–≤–∞—Ä–∏–π–Ω–æ –∑–∞–∫—Ä—ã—Ç–∞ –ø–æ–∑–∏—Ü–∏—è {symbol}")
                            await self.send_telegram(f"üö® –ó–∞–∫—Ä—ã—Ç–∞ –ø–æ–∑–∏—Ü–∏—è {symbol}")
                        else:
                            self.logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–∫—Ä—ã—Ç—å –ø–æ–∑–∏—Ü–∏—é {symbol}: {response}")

                except Exception as e:
                    self.logger.error(f"‚ùå Error closing position {symbol}: {e}")

            # –û—á–∏—â–∞–µ–º –≤—Å–µ –ø–æ–∑–∏—Ü–∏–∏ –∏–∑ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
            self.positions.clear()

        except Exception as e:
            self.logger.error(f"‚ùå Error in close_all_positions: {e}")

    async def send_status_report(self, cycle_count: int):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –±–æ—Ç–∞"""
        try:
            total_api_errors = sum(self.api_errors.values())
            blocked_symbols = len([s for s in self.symbols if s in self.last_trade_time])
            current_balance = await self.get_account_balance()

            balance_change = 0.0
            if self.start_balance and self.start_balance > 0:
                balance_change = ((current_balance - self.start_balance) / self.start_balance) * 100

            await self.send_telegram(
                f"üìà Bot Status (cycle {cycle_count}):\n"
                f"‚Ä¢ Active positions: {len(self.positions)}\n"
                f"‚Ä¢ Pending orders: {len(self.pending_orders)}\n"
                f"‚Ä¢ Blocked symbols: {blocked_symbols}\n"
                f"‚Ä¢ API errors: {total_api_errors}\n"
                f"‚Ä¢ Emergency stop: {'üî¥ YES' if self.emergency_stop else 'üü¢ NO'}\n"
                f"‚Ä¢ Balance: {current_balance:.2f} USDT ({balance_change:+.2f}%)"
            )

        except Exception as e:
            self.logger.error(f"‚ùå Status report error: {e}")

    async def reset_daily_counters(self):
        """–°–±—Ä–æ—Å –¥–Ω–µ–≤–Ω—ã—Ö —Å—á–µ—Ç—á–∏–∫–æ–≤ (–≤—ã–∑—ã–≤–∞—Ç—å —Ä–∞–∑ –≤ –¥–µ–Ω—å)"""
        try:
            current_time = datetime.utcnow()

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ —Å–±—Ä–æ—Å–∏—Ç—å –¥–Ω–µ–≤–Ω—ã–µ —Å—á–µ—Ç—á–∏–∫–∏ (–Ω–æ–≤—ã–π –¥–µ–Ω—å)
            if not hasattr(self, '_last_reset_date'):
                self._last_reset_date = current_time.date()
                return

            if current_time.date() > self._last_reset_date:
                self.daily_start_balance = await self.get_account_balance()
                self.emergency_stop = False
                self._last_reset_date = current_time.date()

                self.logger.info(f"üîÑ –î–Ω–µ–≤–Ω—ã–µ —Å—á–µ—Ç—á–∏–∫–∏ —Å–±—Ä–æ—à–µ–Ω—ã. –ù–æ–≤—ã–π —Å—Ç–∞—Ä—Ç–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {self.daily_start_balance}")
                await self.send_telegram(
                    f"üåÖ –ù–æ–≤—ã–π —Ç–æ—Ä–≥–æ–≤—ã–π –¥–µ–Ω—å!\n"
                    f"–°—Ç–∞—Ä—Ç–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {self.daily_start_balance:.2f} USDT\n"
                    f"–ê–≤–∞—Ä–∏–π–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–±—Ä–æ—à–µ–Ω–∞"
                )

        except Exception as e:
            self.logger.error(f"‚ùå Error resetting daily counters: {e}")

    async def run(self):
        """–ì–ª–∞–≤–Ω—ã–π —Ü–∏–∫–ª –±–æ—Ç–∞"""
        self.logger.info("ü§ñ Bot started")
        await self.send_telegram("ü§ñ Bot started")

        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å
        self.start_balance = await self.get_account_balance()
        self.daily_start_balance = self.start_balance

        if not self.start_balance or self.start_balance <= 0:
            await self.send_telegram("‚ùå Critical error: zero balance!")
            self.logger.critical("‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: –Ω—É–ª–µ–≤–æ–π –±–∞–ª–∞–Ω—Å!")
            return

        self.logger.info(f"üí∞ –°—Ç–∞—Ä—Ç–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {self.start_balance}")

        cycle_count = 0

        while True:
            try:
                cycle_count += 1
                self.logger.info(f"=== Cycle {cycle_count} ===")

                # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–Ω–µ–≤–Ω—ã–µ —Å—á–µ—Ç—á–∏–∫–∏
                await self.reset_daily_counters()

                # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤–∞—Ä–∏–π–Ω—ã–µ —É—Å–ª–æ–≤–∏—è
                await self.check_emergency_conditions()

                # –ï—Å–ª–∏ –∞–≤–∞—Ä–∏–π–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–æ—Ä–≥–æ–≤–ª—é
                if self.emergency_stop:
                    self.logger.info("üö® –ê–≤–∞—Ä–∏–π–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞, —Ç–æ—Ä–≥–æ–≤–ª—è –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
                    await asyncio.sleep(300)  # 5 –º–∏–Ω—É—Ç
                    continue

                # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–∂–∏–¥–∞—é—â–∏–µ –æ—Ä–¥–µ—Ä–∞
                await self.check_pending_orders()

                # 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏
                await self.check_positions()

                # 5. –ò—â–µ–º –Ω–æ–≤—ã–µ —Ç–æ—Ä–≥–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏
                await self.trading_cycle()

                # –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–π –æ—Ç—á–µ—Ç
                if cycle_count % 15 == 0:  # –ö–∞–∂–¥—ã–µ 15 –º–∏–Ω—É—Ç
                    await self.send_status_report(cycle_count)

                # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –∫–∞–∂–¥—ã–µ 30 —Ü–∏–∫–ª–æ–≤
                if cycle_count % 30 == 0:
                    self.start_balance = await self.get_account_balance()

                await asyncio.sleep(60)  # 1 –º–∏–Ω—É—Ç–∞ –º–µ–∂–¥—É —Ü–∏–∫–ª–∞–º–∏

            except KeyboardInterrupt:
                self.logger.info("üõë Bot stopped by user")
                await self.send_telegram("üõë Bot stopped by user")
                break
            except Exception as e:
                self.logger.error(f"‚ùå Main loop error: {e}")
                await self.send_telegram(f"‚ö†Ô∏è Main loop error: {str(e)}")
                await asyncio.sleep(30)


if __name__ == "__main__":
    bot = TradingBot()
    try:
        asyncio.run(bot.run())
    except KeyboardInterrupt:
        bot.logger.info("üõë Bot stopped by user")
    except Exception as e:
        bot.logger.critical(f"üí• Fatal error: {e}")