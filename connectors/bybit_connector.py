# #connectors/bybit_connector.py
#
# import os
# import logging
# import asyncio
# import pandas as pd
# from pybit.unified_trading import HTTP
# from config.paths import LOG_DIR
#
#
# class BybitConnector:
#     def __init__(self):
#         self.logger = logging.getLogger('BybitConnector')
#         self.session = HTTP(
#             api_key=os.getenv("BYBIT_API_KEY"),
#             api_secret=os.getenv("BYBIT_API_SECRET"),
#             testnet=os.getenv("BYBIT_DEMO") == "true"
#         )
#
#     async def run_blocking(self, func, *args, **kwargs):
#         loop = asyncio.get_event_loop()
#         return await loop.run_in_executor(None, lambda: func(*args, **kwargs))
#
#     async def get_klines(self, symbol):
#         try:
#             timeframe = os.getenv("TIMEFRAME", "5")
#             valid_intervals = {
#                 '1': '1', '3': '3', '5': '5', '15': '15', '30': '30',
#                 '60': '60', '120': '120', '240': '240', '360': '360',
#                 '720': '720', 'D': 'D', 'W': 'W', 'M': 'M'
#             }
#             interval = valid_intervals.get(timeframe, '5')
#
#             resp = await self.run_blocking(
#                 self.session.get_kline,
#                 category="linear",
#                 symbol=symbol,
#                 interval=interval,
#                 limit=100
#             )
#             return self._process_data(resp)
#         except Exception as e:
#             self._log_error(f"Kline error: {str(e)}")
#             return None
#
#     async def get_wallet_balance(self):
#         try:
#             response = await self.run_blocking(
#                 self.session.get_wallet_balance,
#                 accountType="UNIFIED"
#             )
#             self.logger.debug(f"Raw balance response: {response}")
#
#             if not response or response.get('retCode') != 0:
#                 self._log_error(f"Bad API response: {response}")
#                 return 0.0
#
#             if 'result' in response and 'list' in response['result']:
#                 account_data = response['result']['list'][0]
#                 if 'totalAvailableBalance' in account_data:
#                     return float(account_data['totalAvailableBalance'])
#                 if 'coin' in account_data:
#                     for coin in account_data['coin']:
#                         if coin.get('coin') == 'USDT':
#                             return float(coin.get('equity', 0))
#             return 0.0
#
#         except Exception as e:
#             self._log_error(f"Balance processing failed: {str(e)}")
#             return 0.0
#
#     async def get_last_price(self, symbol):
#         try:
#             response = await self.run_blocking(
#                 self.session.get_tickers,
#                 category="linear",
#                 symbol=symbol
#             )
#             if response and response['result'] and response['result']['list']:
#                 return {
#                     'last_price': float(response['result']['list'][0]['lastPrice']),
#                     'bid': float(response['result']['list'][0]['bid1Price']),
#                     'ask': float(response['result']['list'][0]['ask1Price'])
#                 }
#             return None
#         except Exception as e:
#             self._log_error(f"Price error: {str(e)}")
#             return None
#
#     async def place_order(self, params):
#         try:
#             self.logger.info(f"üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ä–¥–µ—Ä–∞ –Ω–∞ Bybit: {params}")
#             resp = await self.run_blocking(self.session.place_order, **params)
#             self.logger.info(f"üì• –û—Ç–≤–µ—Ç –æ—Ç Bybit: {resp}")
#             return resp
#         except Exception as e:
#             self._log_error(f"Order placement failed: {str(e)}")
#             return None
#
#     def get_order_status(self, symbol: str, order_id: str):
#         try:
#             response = self.session.get_order_realtime(
#                 category="linear",
#                 symbol=symbol,
#                 orderId=order_id
#             )
#             self.logger.info(f"üîç –°—Ç–∞—Ç—É—Å –æ—Ä–¥–µ—Ä–∞ {order_id}: {response}")
#             result = response.get("result", {}).get("list", [])
#             if result:
#                 return result[0].get("orderStatus")  # 'Filled', 'Cancelled', 'Created'
#             else:
#                 return None
#         except Exception as e:
#             self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –æ—Ä–¥–µ—Ä–∞: {e}")
#             return None
#
#     async def check_api_connection(self):
#         try:
#             response = await self.run_blocking(self.session.get_server_time)
#             return response['retCode'] == 0
#         except Exception:
#             return False
#
#     def _process_data(self, resp):
#         try:
#             if not resp or 'result' not in resp or not resp['result']['list']:
#                 return None
#
#             df = pd.DataFrame(
#                 resp['result']['list'],
#                 columns=['timestamp', 'open', 'high', 'low', 'close', 'volume', 'turnover']
#             )
#
#             numeric_cols = ['open', 'high', 'low', 'close', 'volume']
#             df[numeric_cols] = df[numeric_cols].astype(float)
#             df['timestamp'] = pd.to_datetime(pd.to_numeric(df['timestamp']), unit='ms')
#
#             return df[['timestamp', 'open', 'high', 'low', 'close', 'volume']]
#         except Exception as e:
#             self._log_error(f"Data processing error: {str(e)}")
#             return None
#
#     def _log_error(self, msg):
#         print(f"[BybitConnector ERROR] {msg}")
#         self.logger.error(msg)

#connectors/bybit_connector.py
import os
import logging
import asyncio
import pandas as pd
from pybit.unified_trading import HTTP


class BybitConnector:
    def __init__(self):
        self.logger = logging.getLogger('BybitConnector')
        self.session = HTTP(
            api_key=os.getenv("BYBIT_API_KEY"),
            api_secret=os.getenv("BYBIT_API_SECRET"),
            testnet=os.getenv("BYBIT_DEMO") == "true"
        )

    async def run_blocking(self, func, *args, **kwargs):
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –±–ª–æ–∫–∏—Ä—É—é—â–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π —Å retry –ª–æ–≥–∏–∫–æ–π"""
        max_retries = 3
        for attempt in range(max_retries):
            try:
                loop = asyncio.get_event_loop()
                result = await loop.run_in_executor(None, lambda: func(*args, **kwargs))
                return result
            except Exception as e:
                self.logger.warning(f"‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{max_retries} –Ω–µ—É–¥–∞—á–Ω–∞: {str(e)}")
                if attempt < max_retries - 1:
                    await asyncio.sleep(1 * (attempt + 1))  # –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
                else:
                    raise e

    async def get_klines(self, symbol):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å–≤–µ—á–µ–π —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π"""
        try:
            timeframe = os.getenv("TIMEFRAME", "5")
            valid_intervals = {
                '1': '1', '3': '3', '5': '5', '15': '15', '30': '30',
                '60': '60', '120': '120', '240': '240', '360': '360',
                '720': '720', 'D': 'D', 'W': 'W', 'M': 'M'
            }
            interval = valid_intervals.get(timeframe, '5')

            self.logger.debug(f"–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è {symbol}, –∏–Ω—Ç–µ—Ä–≤–∞–ª: {interval}")

            resp = await self.run_blocking(
                self.session.get_kline,
                category="linear",
                symbol=symbol,
                interval=interval,
                limit=100
            )

            # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –£–ª—É—á—à–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
            return self._process_data(resp, symbol)

        except Exception as e:
            self._log_error(f"Kline error for {symbol}: {str(e)}")
            return None

    async def get_wallet_balance(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –∫–æ—à–µ–ª—å–∫–∞ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
        try:
            response = await self.run_blocking(
                self.session.get_wallet_balance,
                accountType="UNIFIED"
            )
            self.logger.debug(f"Raw balance response: {response}")

            if not response or response.get('retCode') != 0:
                self._log_error(f"Bad API response: {response}")
                return 0.0

            if 'result' in response and 'list' in response['result']:
                account_data = response['result']['list'][0]
                if 'totalAvailableBalance' in account_data:
                    balance = float(account_data['totalAvailableBalance'])
                    self.logger.debug(f"‚úÖ –ë–∞–ª–∞–Ω—Å –ø–æ–ª—É—á–µ–Ω: {balance}")
                    return balance

                if 'coin' in account_data:
                    for coin in account_data['coin']:
                        if coin.get('coin') == 'USDT':
                            balance = float(coin.get('equity', 0))
                            self.logger.debug(f"‚úÖ USDT –±–∞–ª–∞–Ω—Å –ø–æ–ª—É—á–µ–Ω: {balance}")
                            return balance
            return 0.0

        except Exception as e:
            self._log_error(f"Balance processing failed: {str(e)}")
            return 0.0

    async def get_last_price(self, symbol):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Ü–µ–Ω—ã —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π"""
        try:
            response = await self.run_blocking(
                self.session.get_tickers,
                category="linear",
                symbol=symbol
            )

            if not response or response.get('retCode') != 0:
                self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—ã –¥–ª—è {symbol}: {response}")
                return None

            if response and response['result'] and response['result']['list']:
                ticker_data = response['result']['list'][0]
                last_price = float(ticker_data['lastPrice'])
                bid_price = float(ticker_data['bid1Price'])
                ask_price = float(ticker_data['ask1Price'])

                # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑—É–º–Ω–æ—Å—Ç–∏ —Ü–µ–Ω—ã
                if last_price <= 0 or bid_price <= 0 or ask_price <= 0:
                    self.logger.error(
                        f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–µ —Ü–µ–Ω—ã –¥–ª—è {symbol}: last={last_price}, bid={bid_price}, ask={ask_price}")
                    return None

                # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–ø—Ä–µ–¥–∞ (–Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∏–º)
                spread_pct = ((ask_price - bid_price) / last_price) * 100
                if spread_pct > 1.0:  # –°–ø—Ä–µ–¥ –±–æ–ª—å—à–µ 1%
                    self.logger.warning(f"‚ö†Ô∏è –ë–æ–ª—å—à–æ–π —Å–ø—Ä–µ–¥ –¥–ª—è {symbol}: {spread_pct:.2f}%")

                result = {
                    'last_price': last_price,
                    'bid': bid_price,
                    'ask': ask_price,
                    'spread_pct': spread_pct
                }

                self.logger.debug(f"üìä –¶–µ–Ω–∞ –¥–ª—è {symbol}: {result}")
                return result

            return None
        except Exception as e:
            self._log_error(f"Price error for {symbol}: {str(e)}")
            return None

    async def place_order(self, params):
        """–†–∞–∑–º–µ—â–µ–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            required = ['category', 'symbol', 'side', 'orderType', 'qty']
            for param in required:
                if param not in params:
                    raise ValueError(f"Missing required parameter: {param}")

            # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è rate limiting
            await asyncio.sleep(0.5)

            self.logger.info(f"üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ä–¥–µ—Ä–∞ –Ω–∞ Bybit: {params}")
            resp = await self.run_blocking(self.session.place_order, **params)

            # –ü–æ–¥—Ä–æ–±–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–≤–µ—Ç–∞
            if resp is None:
                self.logger.error("‚ùå –ü–æ–ª—É—á–µ–Ω None –æ—Ç–≤–µ—Ç –æ—Ç API")
                return None

            self.logger.info(f"üì• –ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç Bybit: {resp}")

            ret_code = resp.get('retCode')
            ret_msg = resp.get('retMsg', 'Unknown error')

            if ret_code == 0:
                self.logger.info("‚úÖ –û—Ä–¥–µ—Ä —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–º–µ—â—ë–Ω")
            else:
                self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–∞: –∫–æ–¥ {ret_code}, —Å–æ–æ–±—â–µ–Ω–∏–µ: {ret_msg}")

            return resp

        except Exception as e:
            self._log_error(f"Order placement failed: {str(e)}")
            return None

    async def get_order_status(self, symbol: str, order_id: str):
        """–£–ª—É—á—à–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –æ—Ä–¥–µ—Ä–∞"""
        try:
            # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º get_order_realtime (–¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤)
            response = await self.run_blocking(
                self.session.get_order_realtime,
                category="linear",
                symbol=symbol,
                orderId=order_id
            )

            self.logger.debug(f"üîç Real-time —Å—Ç–∞—Ç—É—Å –æ—Ä–¥–µ—Ä–∞ {order_id}: {response}")

            if response and response.get('retCode') == 0:
                result = response.get("result", {}).get("list", [])
                if result:
                    status = result[0].get("orderStatus")
                    self.logger.info(f"üìä Real-time –æ—Ä–¥–µ—Ä {order_id}: {status}")
                    return status

            # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∞–∫—Ç–∏–≤–Ω—ã—Ö, –ø—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –æ—Ä–¥–µ—Ä–æ–≤
            self.logger.debug(f"üîÑ –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –æ—Ä–¥–µ—Ä–æ–≤ –¥–ª—è {order_id}")
            history_response = await self.run_blocking(
                self.session.get_order_history,
                category="linear",
                symbol=symbol,
                orderId=order_id
            )

            self.logger.debug(f"üìö –ò—Å—Ç–æ—Ä–∏—è –æ—Ä–¥–µ—Ä–∞ {order_id}: {history_response}")

            if history_response and history_response.get('retCode') == 0:
                history_result = history_response.get("result", {}).get("list", [])
                if history_result:
                    status = history_result[0].get("orderStatus")
                    self.logger.info(f"üìä –ò—Å—Ç–æ—Ä–∏—è –æ—Ä–¥–µ—Ä {order_id}: {status}")
                    return status

            # –ï—Å–ª–∏ –æ—Ä–¥–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∏ –≤ –∞–∫—Ç–∏–≤–Ω—ã—Ö, –Ω–∏ –≤ –∏—Å—Ç–æ—Ä–∏–∏, –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–∑–∏—Ü–∏–∏
            # –í–æ–∑–º–æ–∂–Ω–æ, —ç—Ç–æ –º–∞—Ä–∫–µ—Ç-–æ—Ä–¥–µ—Ä –∫–æ—Ç–æ—Ä—ã–π –º–≥–Ω–æ–≤–µ–Ω–Ω–æ –∏—Å–ø–æ–ª–Ω–∏–ª—Å—è
            positions = await self.get_positions(symbol)
            if positions and len(positions) > 0:
                for pos in positions:
                    if float(pos.get('size', 0)) > 0:
                        self.logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ –ø–æ–∑–∏—Ü–∏—è –ø–æ {symbol}, –æ—Ä–¥–µ—Ä –≤–µ—Ä–æ—è—Ç–Ω–æ –∏—Å–ø–æ–ª–Ω–µ–Ω")
                        return "Filled"

            self.logger.warning(f"‚ö†Ô∏è –û—Ä–¥–µ—Ä {order_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∏–≥–¥–µ")
            return "Unknown"

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –æ—Ä–¥–µ—Ä–∞: {e}")
            return None

    async def cancel_order(self, symbol: str, order_id: str):
        """–û—Ç–º–µ–Ω–∞ –æ—Ä–¥–µ—Ä–∞"""
        try:
            response = await self.run_blocking(
                self.session.cancel_order,
                category="linear",
                symbol=symbol,
                orderId=order_id
            )
            self.logger.info(f"üö´ –û—Ç–º–µ–Ω–∞ –æ—Ä–¥–µ—Ä–∞ {order_id}: {response}")
            return response.get('retCode') == 0 if response else False
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –æ—Ä–¥–µ—Ä–∞: {e}")
            return False

    async def get_instruments_info(self, symbol: str):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ—Ä–≥–æ–≤–æ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–µ"""
        try:
            response = await self.run_blocking(
                self.session.get_instruments_info,
                category="linear",
                symbol=symbol
            )

            if response and response.get('retCode') == 0:
                data = response['result']['list'][0]

                # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤–∞–∂–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏
                lot_filter = data.get('lotSizeFilter', {})
                price_filter = data.get('priceFilter', {})

                info = {
                    'minOrderQty': float(lot_filter.get('minOrderQty', 0.001)),
                    'qtyStep': float(lot_filter.get('qtyStep', 0.001)),
                    'maxOrderQty': float(lot_filter.get('maxOrderQty', 10000)),
                    'minOrderAmt': float(lot_filter.get('minOrderAmt', 1.0)),
                    'tickSize': float(price_filter.get('tickSize', 0.01))
                }

                self.logger.info(f"üìä Symbol info for {symbol}: {info}")
                return info

        except Exception as e:
            self.logger.error(f"Error getting instrument info for {symbol}: {e}")

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å
        default_info = {
            'minOrderQty': 0.001,
            'qtyStep': 0.001,
            'maxOrderQty': 10000,
            'minOrderAmt': 1.0,
            'tickSize': 0.01
        }

        self.logger.warning(f"Using default info for {symbol}: {default_info}")
        return default_info

    async def set_leverage(self, symbol: str, leverage: int):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫—Ä–µ–¥–∏—Ç–Ω–æ–≥–æ –ø–ª–µ—á–∞"""
        try:
            response = await self.run_blocking(
                self.session.set_leverage,
                category="linear",
                symbol=symbol,
                buyLeverage=str(leverage),
                sellLeverage=str(leverage)
            )
            self.logger.info(f"‚öôÔ∏è –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–ª–µ—á–∞ {leverage}x –¥–ª—è {symbol}: {response}")
            return response.get('retCode') == 0 if response else False
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–ª–µ—á–∞: {e}")
            return False

    async def get_positions(self, symbol: str = None):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö –ø–æ–∑–∏—Ü–∏–π —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π"""
        try:
            params = {"category": "linear"}
            if symbol:
                params["symbol"] = symbol

            response = await self.run_blocking(
                self.session.get_positions,
                **params
            )

            self.logger.debug(f"üìä –ü–æ–∑–∏—Ü–∏–∏ –æ—Ç–≤–µ—Ç: {response}")

            if response and response.get('retCode') == 0:
                positions = response['result']['list']
                self.logger.debug(f"üìç –ù–∞–π–¥–µ–Ω–æ –ø–æ–∑–∏—Ü–∏–π: {len(positions)}")

                # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –ø–æ–∑–∏—Ü–∏–∏ —Å —Ä–∞–∑–º–µ—Ä–æ–º > 0
                active_positions = []
                for pos in positions:
                    size = float(pos.get('size', 0))
                    if size != 0:
                        active_positions.append(pos)
                        self.logger.info(f"üìà –ê–∫—Ç–∏–≤–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è: {pos.get('symbol')} —Ä–∞–∑–º–µ—Ä: {size}")

                return active_positions
            return []
        except Exception as e:
            self._log_error(f"Positions error: {str(e)}")
            return []

    async def check_api_connection(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å API"""
        try:
            response = await self.run_blocking(self.session.get_server_time)
            is_connected = response and response.get('retCode') == 0
            self.logger.debug(f"üîó API —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ: {'‚úÖ OK' if is_connected else '‚ùå Fail'}")
            return is_connected
        except Exception as e:
            self.logger.error(f"‚ùå –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {e}")
            return False

    def _process_data(self, resp, symbol):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å–≤–µ—á–µ–π —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π"""
        try:
            if not resp:
                self.logger.error(f"‚ùå –ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –¥–ª—è {symbol}")
                return None

            if resp.get('retCode') != 0:
                self.logger.error(f"‚ùå API –æ—à–∏–±–∫–∞ –¥–ª—è {symbol}: {resp.get('retMsg')}")
                return None

            if 'result' not in resp:
                self.logger.error(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç 'result' –≤ –æ—Ç–≤–µ—Ç–µ –¥–ª—è {symbol}")
                return None

            if not resp['result'].get('list'):
                self.logger.error(f"‚ùå –ü—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol}")
                return None

            raw_data = resp['result']['list']
            self.logger.debug(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(raw_data)} —Å–≤–µ—á–µ–π –¥–ª—è {symbol}")

            # –°–æ–∑–¥–∞–µ–º DataFrame
            df = pd.DataFrame(
                raw_data,
                columns=['timestamp', 'open', 'high', 'low', 'close', 'volume', 'turnover']
            )

            # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ DataFrame –Ω–µ –ø—É—Å—Ç–æ–π
            if df.empty:
                self.logger.error(f"‚ùå DataFrame –ø—É—Å—Ç–æ–π –¥–ª—è {symbol}")
                return None

            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —á–∏—Å–ª–æ–≤—ã–µ —Ç–∏–ø—ã
            numeric_cols = ['open', 'high', 'low', 'close', 'volume']
            for col in numeric_cols:
                df[col] = pd.to_numeric(df[col], errors='coerce')

            # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ NaN –ø–æ—Å–ª–µ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏
            if df[numeric_cols].isnull().any().any():
                self.logger.error(f"‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã NaN –∑–Ω–∞—á–µ–Ω–∏—è –≤ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol}")
                # –£–¥–∞–ª—è–µ–º —Å—Ç—Ä–æ–∫–∏ —Å NaN
                df = df.dropna(subset=numeric_cols)

            if df.empty:
                self.logger.error(f"‚ùå DataFrame –ø—É—Å—Ç–æ–π –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏ NaN –¥–ª—è {symbol}")
                return None

            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º timestamp
            df['timestamp'] = pd.to_datetime(pd.to_numeric(df['timestamp']), unit='ms')

            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ (–æ—Ç —Å—Ç–∞—Ä—ã—Ö –∫ –Ω–æ–≤—ã–º)
            df = df.sort_values('timestamp')

            # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
            if len(df) < 10:
                self.logger.warning(f"‚ö†Ô∏è –°–ª–∏—à–∫–æ–º –º–∞–ª–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol}: {len(df)}")

            result_df = df[['timestamp', 'open', 'high', 'low', 'close', 'volume']].copy()

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö
            if result_df.isnull().any().any():
                self.logger.error(f"‚ùå –§–∏–Ω–∞–ª—å–Ω—ã–π DataFrame —Å–æ–¥–µ—Ä–∂–∏—Ç NaN –¥–ª—è {symbol}")
                return None

            self.logger.debug(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len(result_df)} —Å–≤–µ—á–µ–π –¥–ª—è {symbol}")
            return result_df

        except Exception as e:
            self._log_error(f"Data processing error for {symbol}: {str(e)}")
            return None

    def _log_error(self, msg):
        """–¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫"""
        print(f"[BybitConnector ERROR] {msg}")
        self.logger.error(msg)